
RobotPerso.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000137e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000137e  00001412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000099  00800060  00800060  00001412  2**0
                  ALLOC
  3 .stab         00001c44  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000760  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000037b8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  000037e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b55  00000000  00000000  000038d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b0  00000000  00000000  0000442c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000645  00000000  00000000  000048dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002ec  00000000  00000000  00004f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000365  00000000  00000000  00005210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000076f  00000000  00000000  00005575  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00005ce4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_9>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__vector_13>
      38:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__vector_14>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 3f       	cpi	r26, 0xF9	; 249
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 15 06 	call	0xc2a	; 0xc2a <main>
      74:	0c 94 bd 09 	jmp	0x137a	; 0x137a <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:
{
	//- Fréquence de l’horloge de l’ADC = 125 kHz
	//- Mode d’opération = Freerun
	//- Référence de voltage = AREF
	//- Mode de traitement des acquisitions = Interruption
	ADMUX	= (0 << REFS1) | (0 << REFS0) | (0 << ADLAR) | (0 << MUX4) | (0 << MUX3) | (0 << MUX2)	| (0 << MUX1) | (0 << MUX0);
      7c:	17 b8       	out	0x07, r1	; 7
	ADCSRA	= (1 << ADEN) | (0 << ADSC) | (1 << ADATE) | (0 << ADIF) | (1 << ADIE) |  (1 << ADPS2)	|  (1 << ADPS1)	 |  (1 << ADPS0); 
      7e:	8f ea       	ldi	r24, 0xAF	; 175
      80:	86 b9       	out	0x06, r24	; 6
	SFIOR	= (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0) | (0 << 4)	   |  (0 << ACME) | (0 << PUD)	| (0 << PSR2)	 | (0 << PSR10);
      82:	10 be       	out	0x30, r1	; 48
	ADCSRA |= (1 << ADSC); //On lance l'aquisition en mode free running
      84:	36 9a       	sbi	0x06, 6	; 6
	ADMUX  ^= (1 << MUX0); //On change immédiatement de canal pour la prochaine conversion
      86:	97 b1       	in	r25, 0x07	; 7
      88:	81 e0       	ldi	r24, 0x01	; 1
      8a:	89 27       	eor	r24, r25
      8c:	87 b9       	out	0x07, r24	; 7
      8e:	08 95       	ret

00000090 <__vector_16>:
}

ISR(ADC_vect)
{
      90:	1f 92       	push	r1
      92:	0f 92       	push	r0
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	0f 92       	push	r0
      98:	11 24       	eor	r1, r1
      9a:	2f 93       	push	r18
      9c:	3f 93       	push	r19
      9e:	4f 93       	push	r20
      a0:	5f 93       	push	r21
      a2:	8f 93       	push	r24
      a4:	9f 93       	push	r25
      a6:	ef 93       	push	r30
      a8:	ff 93       	push	r31
	int16_t vitesse_echantillon;
	
	ADMUX ^= (1  << MUX0); // le changement de canal débute avant la conversion
      aa:	97 b1       	in	r25, 0x07	; 7
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	89 27       	eor	r24, r25
      b0:	87 b9       	out	0x07, r24	; 7
	vitesse_echantillon = ADCL;
      b2:	24 b1       	in	r18, 0x04	; 4
	vitesse_echantillon |= (ADCH << 8);
      b4:	35 b1       	in	r19, 0x05	; 5
      b6:	93 2f       	mov	r25, r19
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	82 2b       	or	r24, r18
	
	switch(ADMUX & (1 << MUX0)) // ADMUX = 0 --> moteur gauche, ADMUX = 1 --> moteur droit 
      bc:	27 b1       	in	r18, 0x07	; 7
      be:	32 2f       	mov	r19, r18
      c0:	31 70       	andi	r19, 0x01	; 1
      c2:	20 ff       	sbrs	r18, 0
      c4:	04 c0       	rjmp	.+8      	; 0xce <__vector_16+0x3e>
      c6:	31 30       	cpi	r19, 0x01	; 1
      c8:	09 f0       	breq	.+2      	; 0xcc <__vector_16+0x3c>
      ca:	3f c0       	rjmp	.+126    	; 0x14a <__vector_16+0xba>
      cc:	1f c0       	rjmp	.+62     	; 0x10c <__vector_16+0x7c>
	{
		case GAUCHE:
		{
			if ( (PORT_ADC & DIR_G) != 0)
      ce:	d9 9b       	sbis	0x1b, 1	; 27
      d0:	0f c0       	rjmp	.+30     	; 0xf0 <__vector_16+0x60>
			{
				somme_vitesse[GAUCHE] -= vitesse_echantillon;
      d2:	ef ec       	ldi	r30, 0xCF	; 207
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	20 81       	ld	r18, Z
      d8:	31 81       	ldd	r19, Z+1	; 0x01
      da:	a9 01       	movw	r20, r18
      dc:	48 1b       	sub	r20, r24
      de:	59 0b       	sbc	r21, r25
      e0:	51 83       	std	Z+1, r21	; 0x01
      e2:	40 83       	st	Z, r20
				nombre_echantillon[GAUCHE]++;
      e4:	ed ec       	ldi	r30, 0xCD	; 205
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	8f 5f       	subi	r24, 0xFF	; 255
      ec:	80 83       	st	Z, r24
      ee:	2d c0       	rjmp	.+90     	; 0x14a <__vector_16+0xba>
			}
			else
			{
				somme_vitesse[GAUCHE] += vitesse_echantillon;
      f0:	ef ec       	ldi	r30, 0xCF	; 207
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	20 81       	ld	r18, Z
      f6:	31 81       	ldd	r19, Z+1	; 0x01
      f8:	82 0f       	add	r24, r18
      fa:	93 1f       	adc	r25, r19
      fc:	91 83       	std	Z+1, r25	; 0x01
      fe:	80 83       	st	Z, r24
				nombre_echantillon[GAUCHE]++;
     100:	ed ec       	ldi	r30, 0xCD	; 205
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	8f 5f       	subi	r24, 0xFF	; 255
     108:	80 83       	st	Z, r24
     10a:	1f c0       	rjmp	.+62     	; 0x14a <__vector_16+0xba>
			}
			break;
		}
		case DROIT:
		{
			if ( (PORT_ADC & DIR_D) != 0)
     10c:	2b b3       	in	r18, 0x1b	; 27
     10e:	23 70       	andi	r18, 0x03	; 3
     110:	79 f0       	breq	.+30     	; 0x130 <__vector_16+0xa0>
			{
				somme_vitesse[DROIT] -= vitesse_echantillon;
     112:	e1 ed       	ldi	r30, 0xD1	; 209
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	20 81       	ld	r18, Z
     118:	31 81       	ldd	r19, Z+1	; 0x01
     11a:	a9 01       	movw	r20, r18
     11c:	48 1b       	sub	r20, r24
     11e:	59 0b       	sbc	r21, r25
     120:	51 83       	std	Z+1, r21	; 0x01
     122:	40 83       	st	Z, r20
				nombre_echantillon[DROIT]++;
     124:	ee ec       	ldi	r30, 0xCE	; 206
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	8f 5f       	subi	r24, 0xFF	; 255
     12c:	80 83       	st	Z, r24
     12e:	0d c0       	rjmp	.+26     	; 0x14a <__vector_16+0xba>
			}
			else
			{
				somme_vitesse[DROIT] += vitesse_echantillon;
     130:	e1 ed       	ldi	r30, 0xD1	; 209
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	20 81       	ld	r18, Z
     136:	31 81       	ldd	r19, Z+1	; 0x01
     138:	82 0f       	add	r24, r18
     13a:	93 1f       	adc	r25, r19
     13c:	91 83       	std	Z+1, r25	; 0x01
     13e:	80 83       	st	Z, r24
				nombre_echantillon[DROIT]++;
     140:	ee ec       	ldi	r30, 0xCE	; 206
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	8f 5f       	subi	r24, 0xFF	; 255
     148:	80 83       	st	Z, r24
			}
			break;
		}
	}
}
     14a:	ff 91       	pop	r31
     14c:	ef 91       	pop	r30
     14e:	9f 91       	pop	r25
     150:	8f 91       	pop	r24
     152:	5f 91       	pop	r21
     154:	4f 91       	pop	r20
     156:	3f 91       	pop	r19
     158:	2f 91       	pop	r18
     15a:	0f 90       	pop	r0
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	0f 90       	pop	r0
     160:	1f 90       	pop	r1
     162:	18 95       	reti

00000164 <moyenne_Moteur>:

void moyenne_Moteur(uint16_t vitesseMoteur[], volatile uint16_t somme_vitesse_copie[], volatile uint8_t nombre_echantillon_copie[])
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	fc 01       	movw	r30, r24
     16a:	eb 01       	movw	r28, r22
     16c:	9a 01       	movw	r18, r20
	nombre_echantillon[GAUCHE]=0; //Une fois l'opération de moyenne faite on réinitialise les données à 0
     16e:	10 92 cd 00 	sts	0x00CD, r1
	somme_vitesse[GAUCHE]=0;
     172:	10 92 d0 00 	sts	0x00D0, r1
     176:	10 92 cf 00 	sts	0x00CF, r1
	nombre_echantillon[DROIT]=0;
     17a:	10 92 ce 00 	sts	0x00CE, r1
	somme_vitesse[DROIT]=0;
     17e:	10 92 d2 00 	sts	0x00D2, r1
     182:	10 92 d1 00 	sts	0x00D1, r1
	vitesseMoteur[DROIT]=somme_vitesse_copie[DROIT]/nombre_echantillon_copie[DROIT];
     186:	8a 81       	ldd	r24, Y+2	; 0x02
     188:	9b 81       	ldd	r25, Y+3	; 0x03
     18a:	da 01       	movw	r26, r20
     18c:	11 96       	adiw	r26, 0x01	; 1
     18e:	6c 91       	ld	r22, X
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	0e 94 95 09 	call	0x132a	; 0x132a <__udivmodhi4>
     196:	73 83       	std	Z+3, r23	; 0x03
     198:	62 83       	std	Z+2, r22	; 0x02
	vitesseMoteur[GAUCHE]=somme_vitesse_copie[GAUCHE]/nombre_echantillon_copie[GAUCHE];	
     19a:	88 81       	ld	r24, Y
     19c:	99 81       	ldd	r25, Y+1	; 0x01
     19e:	d9 01       	movw	r26, r18
     1a0:	6c 91       	ld	r22, X
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	0e 94 95 09 	call	0x132a	; 0x132a <__udivmodhi4>
     1a8:	71 83       	std	Z+1, r23	; 0x01
     1aa:	60 83       	st	Z, r22
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <CalculPWM>:
#include "moteur.h"


void CalculPWM(float Vitesse_D, float Angle_D, float Vg, float Vd, float *Duty_G, float *Duty_D)
{
     1b2:	2f 92       	push	r2
     1b4:	3f 92       	push	r3
     1b6:	4f 92       	push	r4
     1b8:	5f 92       	push	r5
     1ba:	6f 92       	push	r6
     1bc:	7f 92       	push	r7
     1be:	8f 92       	push	r8
     1c0:	9f 92       	push	r9
     1c2:	af 92       	push	r10
     1c4:	bf 92       	push	r11
     1c6:	cf 92       	push	r12
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	2e 97       	sbiw	r28, 0x0e	; 14
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	6b 87       	std	Y+11, r22	; 0x0b
     1e8:	7c 87       	std	Y+12, r23	; 0x0c
     1ea:	8d 87       	std	Y+13, r24	; 0x0d
     1ec:	9e 87       	std	Y+14, r25	; 0x0e
     1ee:	32 2e       	mov	r3, r18
     1f0:	23 2e       	mov	r2, r19
     1f2:	49 83       	std	Y+1, r20	; 0x01
     1f4:	5a 83       	std	Y+2, r21	; 0x02
     1f6:	27 01       	movw	r4, r14
     1f8:	38 01       	movw	r6, r16
     1fa:	9a 86       	std	Y+10, r9	; 0x0a
     1fc:	89 86       	std	Y+9, r8	; 0x09
	static float Ua     = 0.0;
	static int 	 Signe_Ua = 0;
	static int 	 Signe_Ut = 0;


	Vg = (Vg > 1.0) ? 1.0 : ((Vg < -1.0) ? -1.0 : Vg);  /* Regarde les limites (-1.0 à 1.0) */
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	c8 01       	movw	r24, r16
     208:	b7 01       	movw	r22, r14
     20a:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     20e:	18 16       	cp	r1, r24
     210:	9c f0       	brlt	.+38     	; 0x238 <CalculPWM+0x86>
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e8       	ldi	r20, 0x80	; 128
     218:	5f eb       	ldi	r21, 0xBF	; 191
     21a:	c8 01       	movw	r24, r16
     21c:	b7 01       	movw	r22, r14
     21e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__cmpsf2>
     222:	88 23       	and	r24, r24
     224:	8c f4       	brge	.+34     	; 0x248 <CalculPWM+0x96>
     226:	0f 2e       	mov	r0, r31
     228:	41 2c       	mov	r4, r1
     22a:	51 2c       	mov	r5, r1
     22c:	f0 e8       	ldi	r31, 0x80	; 128
     22e:	6f 2e       	mov	r6, r31
     230:	ff eb       	ldi	r31, 0xBF	; 191
     232:	7f 2e       	mov	r7, r31
     234:	f0 2d       	mov	r31, r0
     236:	08 c0       	rjmp	.+16     	; 0x248 <CalculPWM+0x96>
     238:	0f 2e       	mov	r0, r31
     23a:	41 2c       	mov	r4, r1
     23c:	51 2c       	mov	r5, r1
     23e:	f0 e8       	ldi	r31, 0x80	; 128
     240:	6f 2e       	mov	r6, r31
     242:	ff e3       	ldi	r31, 0x3F	; 63
     244:	7f 2e       	mov	r7, r31
     246:	f0 2d       	mov	r31, r0
	Vd = (Vd > 1.0) ? 1.0 : ((Vd < -1.0) ? -1.0 : Vd);  /* Regarde les limites (-1.0 à 1.0) */
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 e8       	ldi	r20, 0x80	; 128
     24e:	5f e3       	ldi	r21, 0x3F	; 63
     250:	c6 01       	movw	r24, r12
     252:	b5 01       	movw	r22, r10
     254:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     258:	18 16       	cp	r1, r24
     25a:	9c f0       	brlt	.+38     	; 0x282 <CalculPWM+0xd0>
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e8       	ldi	r20, 0x80	; 128
     262:	5f eb       	ldi	r21, 0xBF	; 191
     264:	c6 01       	movw	r24, r12
     266:	b5 01       	movw	r22, r10
     268:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__cmpsf2>
     26c:	88 23       	and	r24, r24
     26e:	8c f4       	brge	.+34     	; 0x292 <CalculPWM+0xe0>
     270:	0f 2e       	mov	r0, r31
     272:	a1 2c       	mov	r10, r1
     274:	b1 2c       	mov	r11, r1
     276:	f0 e8       	ldi	r31, 0x80	; 128
     278:	cf 2e       	mov	r12, r31
     27a:	ff eb       	ldi	r31, 0xBF	; 191
     27c:	df 2e       	mov	r13, r31
     27e:	f0 2d       	mov	r31, r0
     280:	08 c0       	rjmp	.+16     	; 0x292 <CalculPWM+0xe0>
     282:	0f 2e       	mov	r0, r31
     284:	a1 2c       	mov	r10, r1
     286:	b1 2c       	mov	r11, r1
     288:	f0 e8       	ldi	r31, 0x80	; 128
     28a:	cf 2e       	mov	r12, r31
     28c:	ff e3       	ldi	r31, 0x3F	; 63
     28e:	df 2e       	mov	r13, r31
     290:	f0 2d       	mov	r31, r0
		
	Old_W = W;
     292:	80 91 60 00 	lds	r24, 0x0060
     296:	90 91 61 00 	lds	r25, 0x0061
     29a:	a0 91 62 00 	lds	r26, 0x0062
     29e:	b0 91 63 00 	lds	r27, 0x0063
     2a2:	8d 83       	std	Y+5, r24	; 0x05
     2a4:	9e 83       	std	Y+6, r25	; 0x06
     2a6:	af 83       	std	Y+7, r26	; 0x07
     2a8:	b8 87       	std	Y+8, r27	; 0x08
     2aa:	80 93 64 00 	sts	0x0064, r24
     2ae:	90 93 65 00 	sts	0x0065, r25
     2b2:	a0 93 66 00 	sts	0x0066, r26
     2b6:	b0 93 67 00 	sts	0x0067, r27
	W     = 0.5*(Vmax/RAYON)*(Vd-Vg);
     2ba:	a3 01       	movw	r20, r6
     2bc:	92 01       	movw	r18, r4
     2be:	c6 01       	movw	r24, r12
     2c0:	b5 01       	movw	r22, r10
     2c2:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     2c6:	2a e1       	ldi	r18, 0x1A	; 26
     2c8:	32 e6       	ldi	r19, 0x62	; 98
     2ca:	46 e8       	ldi	r20, 0x86	; 134
     2cc:	50 e4       	ldi	r21, 0x40	; 64
     2ce:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     2d2:	96 2e       	mov	r9, r22
     2d4:	87 2e       	mov	r8, r23
     2d6:	8b 83       	std	Y+3, r24	; 0x03
     2d8:	9c 83       	std	Y+4, r25	; 0x04
     2da:	38 2f       	mov	r19, r24
     2dc:	29 2f       	mov	r18, r25
     2de:	86 2f       	mov	r24, r22
     2e0:	98 2d       	mov	r25, r8
     2e2:	a3 2f       	mov	r26, r19
     2e4:	b2 2f       	mov	r27, r18
     2e6:	80 93 60 00 	sts	0x0060, r24
     2ea:	90 93 61 00 	sts	0x0061, r25
     2ee:	a0 93 62 00 	sts	0x0062, r26
     2f2:	b0 93 63 00 	sts	0x0063, r27
	Vt    = 0.5*(Vd+Vg);
     2f6:	a6 01       	movw	r20, r12
     2f8:	95 01       	movw	r18, r10
     2fa:	c3 01       	movw	r24, r6
     2fc:	b2 01       	movw	r22, r4
     2fe:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	5f e3       	ldi	r21, 0x3F	; 63
     30a:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     30e:	76 2e       	mov	r7, r22
     310:	67 2e       	mov	r6, r23
     312:	58 2e       	mov	r5, r24
     314:	49 2e       	mov	r4, r25
     316:	86 2f       	mov	r24, r22
     318:	96 2d       	mov	r25, r6
     31a:	a5 2d       	mov	r26, r5
     31c:	b4 2d       	mov	r27, r4
     31e:	80 93 68 00 	sts	0x0068, r24
     322:	90 93 69 00 	sts	0x0069, r25
     326:	a0 93 6a 00 	sts	0x006A, r26
     32a:	b0 93 6b 00 	sts	0x006B, r27

	Angle = Angle + (0.5)*TS*(W+Old_W);
     32e:	9b 81       	ldd	r25, Y+3	; 0x03
     330:	8c 81       	ldd	r24, Y+4	; 0x04
     332:	29 2d       	mov	r18, r9
     334:	38 2d       	mov	r19, r8
     336:	49 2f       	mov	r20, r25
     338:	58 2f       	mov	r21, r24
     33a:	6d 81       	ldd	r22, Y+5	; 0x05
     33c:	7e 81       	ldd	r23, Y+6	; 0x06
     33e:	8f 81       	ldd	r24, Y+7	; 0x07
     340:	98 85       	ldd	r25, Y+8	; 0x08
     342:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     346:	2a e0       	ldi	r18, 0x0A	; 10
     348:	37 ed       	ldi	r19, 0xD7	; 215
     34a:	43 e2       	ldi	r20, 0x23	; 35
     34c:	5b e3       	ldi	r21, 0x3B	; 59
     34e:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     352:	20 91 6c 00 	lds	r18, 0x006C
     356:	30 91 6d 00 	lds	r19, 0x006D
     35a:	40 91 6e 00 	lds	r20, 0x006E
     35e:	50 91 6f 00 	lds	r21, 0x006F
     362:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     366:	a6 2e       	mov	r10, r22
     368:	b7 2e       	mov	r11, r23
     36a:	c8 2e       	mov	r12, r24
     36c:	d9 2e       	mov	r13, r25
     36e:	e6 2e       	mov	r14, r22
     370:	f7 2e       	mov	r15, r23
     372:	08 2f       	mov	r16, r24
     374:	19 2f       	mov	r17, r25
	Angle = (Angle > 2.0*Pi) ? Angle - 2*Pi : ((Angle < 0.0) ? Angle + 2*Pi : Angle); /* Angle entre 0 et 2 pi */
     376:	2b ed       	ldi	r18, 0xDB	; 219
     378:	3f e0       	ldi	r19, 0x0F	; 15
     37a:	49 ec       	ldi	r20, 0xC9	; 201
     37c:	50 e4       	ldi	r21, 0x40	; 64
     37e:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     382:	18 16       	cp	r1, r24
     384:	7c f4       	brge	.+30     	; 0x3a4 <CalculPWM+0x1f2>
     386:	2b ed       	ldi	r18, 0xDB	; 219
     388:	3f e0       	ldi	r19, 0x0F	; 15
     38a:	49 ec       	ldi	r20, 0xC9	; 201
     38c:	50 e4       	ldi	r21, 0x40	; 64
     38e:	6a 2d       	mov	r22, r10
     390:	7b 2d       	mov	r23, r11
     392:	8c 2d       	mov	r24, r12
     394:	9d 2d       	mov	r25, r13
     396:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     39a:	e6 2e       	mov	r14, r22
     39c:	f7 2e       	mov	r15, r23
     39e:	08 2f       	mov	r16, r24
     3a0:	19 2f       	mov	r17, r25
     3a2:	19 c0       	rjmp	.+50     	; 0x3d6 <CalculPWM+0x224>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	a9 01       	movw	r20, r18
     3aa:	6a 2d       	mov	r22, r10
     3ac:	7b 2d       	mov	r23, r11
     3ae:	8c 2d       	mov	r24, r12
     3b0:	9d 2d       	mov	r25, r13
     3b2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__cmpsf2>
     3b6:	88 23       	and	r24, r24
     3b8:	74 f4       	brge	.+28     	; 0x3d6 <CalculPWM+0x224>
     3ba:	2b ed       	ldi	r18, 0xDB	; 219
     3bc:	3f e0       	ldi	r19, 0x0F	; 15
     3be:	49 ec       	ldi	r20, 0xC9	; 201
     3c0:	50 e4       	ldi	r21, 0x40	; 64
     3c2:	6a 2d       	mov	r22, r10
     3c4:	7b 2d       	mov	r23, r11
     3c6:	8c 2d       	mov	r24, r12
     3c8:	9d 2d       	mov	r25, r13
     3ca:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     3ce:	e6 2e       	mov	r14, r22
     3d0:	f7 2e       	mov	r15, r23
     3d2:	08 2f       	mov	r16, r24
     3d4:	19 2f       	mov	r17, r25
     3d6:	8e 2d       	mov	r24, r14
     3d8:	9f 2d       	mov	r25, r15
     3da:	a0 2f       	mov	r26, r16
     3dc:	b1 2f       	mov	r27, r17
     3de:	80 93 6c 00 	sts	0x006C, r24
     3e2:	90 93 6d 00 	sts	0x006D, r25
     3e6:	a0 93 6e 00 	sts	0x006E, r26
     3ea:	b0 93 6f 00 	sts	0x006F, r27
	ErreurAngle = ((Angle_D >= Pi + Angle) ? Angle_D - 2*Pi : ((Angle_D <= -Pi + Angle) ? Angle_D + 2*Pi : Angle_D))-Angle;
     3ee:	2b ed       	ldi	r18, 0xDB	; 219
     3f0:	3f e0       	ldi	r19, 0x0F	; 15
     3f2:	49 e4       	ldi	r20, 0x49	; 73
     3f4:	50 e4       	ldi	r21, 0x40	; 64
     3f6:	6e 2d       	mov	r22, r14
     3f8:	7f 2d       	mov	r23, r15
     3fa:	80 2f       	mov	r24, r16
     3fc:	91 2f       	mov	r25, r17
     3fe:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     402:	f9 81       	ldd	r31, Y+1	; 0x01
     404:	ea 81       	ldd	r30, Y+2	; 0x02
     406:	23 2d       	mov	r18, r3
     408:	32 2d       	mov	r19, r2
     40a:	4f 2f       	mov	r20, r31
     40c:	5e 2f       	mov	r21, r30
     40e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__cmpsf2>
     412:	18 16       	cp	r1, r24
     414:	8c f0       	brlt	.+34     	; 0x438 <CalculPWM+0x286>
     416:	2b ed       	ldi	r18, 0xDB	; 219
     418:	3f e0       	ldi	r19, 0x0F	; 15
     41a:	49 ec       	ldi	r20, 0xC9	; 201
     41c:	50 e4       	ldi	r21, 0x40	; 64
     41e:	f9 81       	ldd	r31, Y+1	; 0x01
     420:	ea 81       	ldd	r30, Y+2	; 0x02
     422:	63 2d       	mov	r22, r3
     424:	72 2d       	mov	r23, r2
     426:	8f 2f       	mov	r24, r31
     428:	9e 2f       	mov	r25, r30
     42a:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     42e:	36 2e       	mov	r3, r22
     430:	27 2e       	mov	r2, r23
     432:	89 83       	std	Y+1, r24	; 0x01
     434:	9a 83       	std	Y+2, r25	; 0x02
     436:	26 c0       	rjmp	.+76     	; 0x484 <CalculPWM+0x2d2>
     438:	2b ed       	ldi	r18, 0xDB	; 219
     43a:	3f e0       	ldi	r19, 0x0F	; 15
     43c:	49 e4       	ldi	r20, 0x49	; 73
     43e:	50 e4       	ldi	r21, 0x40	; 64
     440:	6e 2d       	mov	r22, r14
     442:	7f 2d       	mov	r23, r15
     444:	80 2f       	mov	r24, r16
     446:	91 2f       	mov	r25, r17
     448:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     44c:	9b 01       	movw	r18, r22
     44e:	ac 01       	movw	r20, r24
     450:	f9 81       	ldd	r31, Y+1	; 0x01
     452:	ea 81       	ldd	r30, Y+2	; 0x02
     454:	63 2d       	mov	r22, r3
     456:	72 2d       	mov	r23, r2
     458:	8f 2f       	mov	r24, r31
     45a:	9e 2f       	mov	r25, r30
     45c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__cmpsf2>
     460:	18 16       	cp	r1, r24
     462:	84 f0       	brlt	.+32     	; 0x484 <CalculPWM+0x2d2>
     464:	2b ed       	ldi	r18, 0xDB	; 219
     466:	3f e0       	ldi	r19, 0x0F	; 15
     468:	49 ec       	ldi	r20, 0xC9	; 201
     46a:	50 e4       	ldi	r21, 0x40	; 64
     46c:	f9 81       	ldd	r31, Y+1	; 0x01
     46e:	ea 81       	ldd	r30, Y+2	; 0x02
     470:	63 2d       	mov	r22, r3
     472:	72 2d       	mov	r23, r2
     474:	8f 2f       	mov	r24, r31
     476:	9e 2f       	mov	r25, r30
     478:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     47c:	36 2e       	mov	r3, r22
     47e:	27 2e       	mov	r2, r23
     480:	89 83       	std	Y+1, r24	; 0x01
     482:	9a 83       	std	Y+2, r25	; 0x02
     484:	2e 2d       	mov	r18, r14
     486:	3f 2d       	mov	r19, r15
     488:	40 2f       	mov	r20, r16
     48a:	51 2f       	mov	r21, r17
     48c:	f9 81       	ldd	r31, Y+1	; 0x01
     48e:	ea 81       	ldd	r30, Y+2	; 0x02
     490:	63 2d       	mov	r22, r3
     492:	72 2d       	mov	r23, r2
     494:	8f 2f       	mov	r24, r31
     496:	9e 2f       	mov	r25, r30
     498:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     49c:	e6 2e       	mov	r14, r22
     49e:	f7 2e       	mov	r15, r23
     4a0:	08 2f       	mov	r16, r24
     4a2:	19 2f       	mov	r17, r25
     4a4:	86 2f       	mov	r24, r22
     4a6:	9f 2d       	mov	r25, r15
     4a8:	a0 2f       	mov	r26, r16
     4aa:	b1 2f       	mov	r27, r17
     4ac:	80 93 70 00 	sts	0x0070, r24
     4b0:	90 93 71 00 	sts	0x0071, r25
     4b4:	a0 93 72 00 	sts	0x0072, r26
     4b8:	b0 93 73 00 	sts	0x0073, r27

	Ut = -H11*Vt + H12*Vitesse_D;
     4bc:	28 ee       	ldi	r18, 0xE8	; 232
     4be:	31 eb       	ldi	r19, 0xB1	; 177
     4c0:	49 e7       	ldi	r20, 0x79	; 121
     4c2:	50 ec       	ldi	r21, 0xC0	; 192
     4c4:	67 2d       	mov	r22, r7
     4c6:	76 2d       	mov	r23, r6
     4c8:	85 2d       	mov	r24, r5
     4ca:	94 2d       	mov	r25, r4
     4cc:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     4d0:	2b 01       	movw	r4, r22
     4d2:	3c 01       	movw	r6, r24
     4d4:	24 ef       	ldi	r18, 0xF4	; 244
     4d6:	38 ed       	ldi	r19, 0xD8	; 216
     4d8:	4c e9       	ldi	r20, 0x9C	; 156
     4da:	50 e4       	ldi	r21, 0x40	; 64
     4dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     4de:	7c 85       	ldd	r23, Y+12	; 0x0c
     4e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     4e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     4e4:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     4e8:	9b 01       	movw	r18, r22
     4ea:	ac 01       	movw	r20, r24
     4ec:	c3 01       	movw	r24, r6
     4ee:	b2 01       	movw	r22, r4
     4f0:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     4f4:	69 83       	std	Y+1, r22	; 0x01
     4f6:	7a 83       	std	Y+2, r23	; 0x02
     4f8:	68 2e       	mov	r6, r24
     4fa:	79 2e       	mov	r7, r25
     4fc:	a6 2e       	mov	r10, r22
     4fe:	b7 2e       	mov	r11, r23
     500:	c8 2e       	mov	r12, r24
     502:	d9 2e       	mov	r13, r25
	Ua = H21*ErreurAngle - H22*W;
     504:	21 e2       	ldi	r18, 0x21	; 33
     506:	37 ea       	ldi	r19, 0xA7	; 167
     508:	44 e9       	ldi	r20, 0x94	; 148
     50a:	5f e3       	ldi	r21, 0x3F	; 63
     50c:	6e 2d       	mov	r22, r14
     50e:	7f 2d       	mov	r23, r15
     510:	80 2f       	mov	r24, r16
     512:	91 2f       	mov	r25, r17
     514:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     518:	1b 01       	movw	r2, r22
     51a:	2c 01       	movw	r4, r24
     51c:	28 e1       	ldi	r18, 0x18	; 24
     51e:	37 ea       	ldi	r19, 0xA7	; 167
     520:	44 e1       	ldi	r20, 0x14	; 20
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	fb 81       	ldd	r31, Y+3	; 0x03
     526:	ec 81       	ldd	r30, Y+4	; 0x04
     528:	69 2d       	mov	r22, r9
     52a:	78 2d       	mov	r23, r8
     52c:	8f 2f       	mov	r24, r31
     52e:	9e 2f       	mov	r25, r30
     530:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	c2 01       	movw	r24, r4
     53a:	b1 01       	movw	r22, r2
     53c:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     540:	86 2e       	mov	r8, r22
     542:	97 2e       	mov	r9, r23
     544:	e8 2e       	mov	r14, r24
     546:	f9 2e       	mov	r15, r25
     548:	46 2e       	mov	r4, r22
     54a:	57 2e       	mov	r5, r23
     54c:	28 2e       	mov	r2, r24
     54e:	39 2e       	mov	r3, r25
			
	Signe_Ua = (Ua >= 0.0)   ? 1 : -1;
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	a9 01       	movw	r20, r18
     556:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     55a:	88 23       	and	r24, r24
     55c:	1c f0       	brlt	.+6      	; 0x564 <CalculPWM+0x3b2>
     55e:	01 e0       	ldi	r16, 0x01	; 1
     560:	10 e0       	ldi	r17, 0x00	; 0
     562:	02 c0       	rjmp	.+4      	; 0x568 <CalculPWM+0x3b6>
     564:	0f ef       	ldi	r16, 0xFF	; 255
     566:	1f ef       	ldi	r17, 0xFF	; 255
     568:	10 93 7d 00 	sts	0x007D, r17
     56c:	00 93 7c 00 	sts	0x007C, r16
	Signe_Ut = (Ut >= 0.0) ? 1 : -1;
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	a9 01       	movw	r20, r18
     576:	b9 81       	ldd	r27, Y+1	; 0x01
     578:	aa 81       	ldd	r26, Y+2	; 0x02
     57a:	6b 2f       	mov	r22, r27
     57c:	7a 2f       	mov	r23, r26
     57e:	86 2d       	mov	r24, r6
     580:	97 2d       	mov	r25, r7
     582:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     586:	88 23       	and	r24, r24
     588:	2c f0       	brlt	.+10     	; 0x594 <CalculPWM+0x3e2>
     58a:	a1 e0       	ldi	r26, 0x01	; 1
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	be 83       	std	Y+6, r27	; 0x06
     590:	ad 83       	std	Y+5, r26	; 0x05
     592:	04 c0       	rjmp	.+8      	; 0x59c <CalculPWM+0x3ea>
     594:	ef ef       	ldi	r30, 0xFF	; 255
     596:	ff ef       	ldi	r31, 0xFF	; 255
     598:	fe 83       	std	Y+6, r31	; 0x06
     59a:	ed 83       	std	Y+5, r30	; 0x05
     59c:	2d 81       	ldd	r18, Y+5	; 0x05
     59e:	3e 81       	ldd	r19, Y+6	; 0x06
     5a0:	30 93 7f 00 	sts	0x007F, r19
     5a4:	20 93 7e 00 	sts	0x007E, r18
	
	Ua = (Signe_Ua*Ua > 1.0) ? Signe_Ua*1.0 : ((Signe_Ua*Ua <= 0.05) ? 0.0 : Ua);
     5a8:	b8 01       	movw	r22, r16
     5aa:	88 27       	eor	r24, r24
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	80 95       	com	r24
     5b0:	98 2f       	mov	r25, r24
     5b2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     5b6:	6b 83       	std	Y+3, r22	; 0x03
     5b8:	7c 83       	std	Y+4, r23	; 0x04
     5ba:	08 2f       	mov	r16, r24
     5bc:	19 2f       	mov	r17, r25
     5be:	76 2f       	mov	r23, r22
     5c0:	6c 81       	ldd	r22, Y+4	; 0x04
     5c2:	27 2f       	mov	r18, r23
     5c4:	36 2f       	mov	r19, r22
     5c6:	40 2f       	mov	r20, r16
     5c8:	51 2f       	mov	r21, r17
     5ca:	68 2d       	mov	r22, r8
     5cc:	79 2d       	mov	r23, r9
     5ce:	8e 2d       	mov	r24, r14
     5d0:	9f 2d       	mov	r25, r15
     5d2:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     5d6:	86 2e       	mov	r8, r22
     5d8:	97 2e       	mov	r9, r23
     5da:	e8 2e       	mov	r14, r24
     5dc:	f9 2e       	mov	r15, r25
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e8       	ldi	r20, 0x80	; 128
     5e4:	5f e3       	ldi	r21, 0x3F	; 63
     5e6:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     5ea:	18 16       	cp	r1, r24
     5ec:	8c f0       	brlt	.+34     	; 0x610 <CalculPWM+0x45e>
     5ee:	2d ec       	ldi	r18, 0xCD	; 205
     5f0:	3c ec       	ldi	r19, 0xCC	; 204
     5f2:	4c e4       	ldi	r20, 0x4C	; 76
     5f4:	5d e3       	ldi	r21, 0x3D	; 61
     5f6:	68 2d       	mov	r22, r8
     5f8:	79 2d       	mov	r23, r9
     5fa:	8e 2d       	mov	r24, r14
     5fc:	9f 2d       	mov	r25, r15
     5fe:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__cmpsf2>
     602:	18 16       	cp	r1, r24
     604:	4c f0       	brlt	.+18     	; 0x618 <CalculPWM+0x466>
     606:	41 2c       	mov	r4, r1
     608:	51 2c       	mov	r5, r1
     60a:	21 2c       	mov	r2, r1
     60c:	31 2c       	mov	r3, r1
     60e:	04 c0       	rjmp	.+8      	; 0x618 <CalculPWM+0x466>
     610:	4b 80       	ldd	r4, Y+3	; 0x03
     612:	5c 80       	ldd	r5, Y+4	; 0x04
     614:	20 2e       	mov	r2, r16
     616:	31 2e       	mov	r3, r17
     618:	84 2d       	mov	r24, r4
     61a:	95 2d       	mov	r25, r5
     61c:	a2 2d       	mov	r26, r2
     61e:	b3 2d       	mov	r27, r3
     620:	80 93 78 00 	sts	0x0078, r24
     624:	90 93 79 00 	sts	0x0079, r25
     628:	a0 93 7a 00 	sts	0x007A, r26
     62c:	b0 93 7b 00 	sts	0x007B, r27
	Ut = (Signe_Ut*Ut > 1.0) ? Signe_Ut*1.0 : Ut;
     630:	ad 81       	ldd	r26, Y+5	; 0x05
     632:	be 81       	ldd	r27, Y+6	; 0x06
     634:	bd 01       	movw	r22, r26
     636:	88 27       	eor	r24, r24
     638:	77 fd       	sbrc	r23, 7
     63a:	80 95       	com	r24
     63c:	98 2f       	mov	r25, r24
     63e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     642:	86 2e       	mov	r8, r22
     644:	97 2e       	mov	r9, r23
     646:	e8 2e       	mov	r14, r24
     648:	f9 2e       	mov	r15, r25
     64a:	76 2f       	mov	r23, r22
     64c:	27 2f       	mov	r18, r23
     64e:	39 2d       	mov	r19, r9
     650:	4e 2d       	mov	r20, r14
     652:	5f 2d       	mov	r21, r15
     654:	b9 81       	ldd	r27, Y+1	; 0x01
     656:	aa 81       	ldd	r26, Y+2	; 0x02
     658:	6b 2f       	mov	r22, r27
     65a:	7a 2f       	mov	r23, r26
     65c:	86 2d       	mov	r24, r6
     65e:	97 2d       	mov	r25, r7
     660:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e8       	ldi	r20, 0x80	; 128
     66a:	5f e3       	ldi	r21, 0x3F	; 63
     66c:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     670:	18 16       	cp	r1, r24
     672:	24 f4       	brge	.+8      	; 0x67c <CalculPWM+0x4ca>
     674:	a8 2c       	mov	r10, r8
     676:	b9 2c       	mov	r11, r9
     678:	ce 2c       	mov	r12, r14
     67a:	df 2c       	mov	r13, r15
	Ut = ((Signe_Ut*Ut) > (1.0 - Signe_Ua*Ua)) ? Signe_Ut*(1.0 - Signe_Ua*Ua) : Ut;
     67c:	7b 81       	ldd	r23, Y+3	; 0x03
     67e:	6c 81       	ldd	r22, Y+4	; 0x04
     680:	27 2f       	mov	r18, r23
     682:	36 2f       	mov	r19, r22
     684:	40 2f       	mov	r20, r16
     686:	51 2f       	mov	r21, r17
     688:	64 2d       	mov	r22, r4
     68a:	75 2d       	mov	r23, r5
     68c:	82 2d       	mov	r24, r2
     68e:	93 2d       	mov	r25, r3
     690:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     694:	9b 01       	movw	r18, r22
     696:	ac 01       	movw	r20, r24
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e8       	ldi	r24, 0x80	; 128
     69e:	9f e3       	ldi	r25, 0x3F	; 63
     6a0:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     6a4:	66 2e       	mov	r6, r22
     6a6:	77 2e       	mov	r7, r23
     6a8:	08 2f       	mov	r16, r24
     6aa:	19 2f       	mov	r17, r25
     6ac:	28 2d       	mov	r18, r8
     6ae:	39 2d       	mov	r19, r9
     6b0:	4e 2d       	mov	r20, r14
     6b2:	5f 2d       	mov	r21, r15
     6b4:	6a 2d       	mov	r22, r10
     6b6:	7b 2d       	mov	r23, r11
     6b8:	8c 2d       	mov	r24, r12
     6ba:	9d 2d       	mov	r25, r13
     6bc:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     6c0:	26 2d       	mov	r18, r6
     6c2:	37 2d       	mov	r19, r7
     6c4:	40 2f       	mov	r20, r16
     6c6:	51 2f       	mov	r21, r17
     6c8:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     6cc:	18 16       	cp	r1, r24
     6ce:	74 f4       	brge	.+28     	; 0x6ec <CalculPWM+0x53a>
     6d0:	26 2d       	mov	r18, r6
     6d2:	37 2d       	mov	r19, r7
     6d4:	40 2f       	mov	r20, r16
     6d6:	51 2f       	mov	r21, r17
     6d8:	68 2d       	mov	r22, r8
     6da:	79 2d       	mov	r23, r9
     6dc:	8e 2d       	mov	r24, r14
     6de:	9f 2d       	mov	r25, r15
     6e0:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     6e4:	a6 2e       	mov	r10, r22
     6e6:	b7 2e       	mov	r11, r23
     6e8:	c8 2e       	mov	r12, r24
     6ea:	d9 2e       	mov	r13, r25
     6ec:	5a 2d       	mov	r21, r10
     6ee:	4b 2d       	mov	r20, r11
     6f0:	8a 2d       	mov	r24, r10
     6f2:	9b 2d       	mov	r25, r11
     6f4:	ac 2d       	mov	r26, r12
     6f6:	bd 2d       	mov	r27, r13
     6f8:	80 93 74 00 	sts	0x0074, r24
     6fc:	90 93 75 00 	sts	0x0075, r25
     700:	a0 93 76 00 	sts	0x0076, r26
     704:	b0 93 77 00 	sts	0x0077, r27


	*Duty_D = (Ut+Ua);
     708:	25 2f       	mov	r18, r21
     70a:	34 2f       	mov	r19, r20
     70c:	4a 2f       	mov	r20, r26
     70e:	5b 2f       	mov	r21, r27
     710:	64 2d       	mov	r22, r4
     712:	75 2d       	mov	r23, r5
     714:	82 2d       	mov	r24, r2
     716:	93 2d       	mov	r25, r3
     718:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     71c:	eb a1       	ldd	r30, Y+35	; 0x23
     71e:	fc a1       	ldd	r31, Y+36	; 0x24
     720:	60 83       	st	Z, r22
     722:	71 83       	std	Z+1, r23	; 0x01
     724:	82 83       	std	Z+2, r24	; 0x02
     726:	93 83       	std	Z+3, r25	; 0x03
	*Duty_G = (Ut-Ua);
     728:	24 2d       	mov	r18, r4
     72a:	35 2d       	mov	r19, r5
     72c:	42 2d       	mov	r20, r2
     72e:	53 2d       	mov	r21, r3
     730:	6a 2d       	mov	r22, r10
     732:	7b 2d       	mov	r23, r11
     734:	8c 2d       	mov	r24, r12
     736:	9d 2d       	mov	r25, r13
     738:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     73c:	a9 85       	ldd	r26, Y+9	; 0x09
     73e:	ba 85       	ldd	r27, Y+10	; 0x0a
     740:	6d 93       	st	X+, r22
     742:	7d 93       	st	X+, r23
     744:	8d 93       	st	X+, r24
     746:	9c 93       	st	X, r25
     748:	13 97       	sbiw	r26, 0x03	; 3

	*Duty_D = (*Duty_D > 0.99) ? 0.99 : ((*Duty_D < -0.99) ? -0.99 : *Duty_D);
     74a:	eb a1       	ldd	r30, Y+35	; 0x23
     74c:	fc a1       	ldd	r31, Y+36	; 0x24
     74e:	c0 80       	ld	r12, Z
     750:	d1 80       	ldd	r13, Z+1	; 0x01
     752:	e2 80       	ldd	r14, Z+2	; 0x02
     754:	f3 80       	ldd	r15, Z+3	; 0x03
     756:	24 ea       	ldi	r18, 0xA4	; 164
     758:	30 e7       	ldi	r19, 0x70	; 112
     75a:	4d e7       	ldi	r20, 0x7D	; 125
     75c:	5f e3       	ldi	r21, 0x3F	; 63
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     766:	18 16       	cp	r1, r24
     768:	ac f0       	brlt	.+42     	; 0x794 <CalculPWM+0x5e2>
     76a:	24 ea       	ldi	r18, 0xA4	; 164
     76c:	30 e7       	ldi	r19, 0x70	; 112
     76e:	4d e7       	ldi	r20, 0x7D	; 125
     770:	5f eb       	ldi	r21, 0xBF	; 191
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__cmpsf2>
     77a:	88 23       	and	r24, r24
     77c:	ac f4       	brge	.+42     	; 0x7a8 <CalculPWM+0x5f6>
     77e:	0f 2e       	mov	r0, r31
     780:	f4 ea       	ldi	r31, 0xA4	; 164
     782:	cf 2e       	mov	r12, r31
     784:	f0 e7       	ldi	r31, 0x70	; 112
     786:	df 2e       	mov	r13, r31
     788:	fd e7       	ldi	r31, 0x7D	; 125
     78a:	ef 2e       	mov	r14, r31
     78c:	ff eb       	ldi	r31, 0xBF	; 191
     78e:	ff 2e       	mov	r15, r31
     790:	f0 2d       	mov	r31, r0
     792:	0a c0       	rjmp	.+20     	; 0x7a8 <CalculPWM+0x5f6>
     794:	0f 2e       	mov	r0, r31
     796:	f4 ea       	ldi	r31, 0xA4	; 164
     798:	cf 2e       	mov	r12, r31
     79a:	f0 e7       	ldi	r31, 0x70	; 112
     79c:	df 2e       	mov	r13, r31
     79e:	fd e7       	ldi	r31, 0x7D	; 125
     7a0:	ef 2e       	mov	r14, r31
     7a2:	ff e3       	ldi	r31, 0x3F	; 63
     7a4:	ff 2e       	mov	r15, r31
     7a6:	f0 2d       	mov	r31, r0
     7a8:	ab a1       	ldd	r26, Y+35	; 0x23
     7aa:	bc a1       	ldd	r27, Y+36	; 0x24
     7ac:	cd 92       	st	X+, r12
     7ae:	dd 92       	st	X+, r13
     7b0:	ed 92       	st	X+, r14
     7b2:	fc 92       	st	X, r15
     7b4:	13 97       	sbiw	r26, 0x03	; 3
	*Duty_G = (*Duty_G > 0.99) ? 0.99 : ((*Duty_G < -0.99) ? -0.99 : *Duty_G);	
     7b6:	e9 85       	ldd	r30, Y+9	; 0x09
     7b8:	fa 85       	ldd	r31, Y+10	; 0x0a
     7ba:	c0 80       	ld	r12, Z
     7bc:	d1 80       	ldd	r13, Z+1	; 0x01
     7be:	e2 80       	ldd	r14, Z+2	; 0x02
     7c0:	f3 80       	ldd	r15, Z+3	; 0x03
     7c2:	24 ea       	ldi	r18, 0xA4	; 164
     7c4:	30 e7       	ldi	r19, 0x70	; 112
     7c6:	4d e7       	ldi	r20, 0x7D	; 125
     7c8:	5f e3       	ldi	r21, 0x3F	; 63
     7ca:	c7 01       	movw	r24, r14
     7cc:	b6 01       	movw	r22, r12
     7ce:	0e 94 2e 09 	call	0x125c	; 0x125c <__gesf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	ac f0       	brlt	.+42     	; 0x800 <CalculPWM+0x64e>
     7d6:	24 ea       	ldi	r18, 0xA4	; 164
     7d8:	30 e7       	ldi	r19, 0x70	; 112
     7da:	4d e7       	ldi	r20, 0x7D	; 125
     7dc:	5f eb       	ldi	r21, 0xBF	; 191
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__cmpsf2>
     7e6:	88 23       	and	r24, r24
     7e8:	ac f4       	brge	.+42     	; 0x814 <CalculPWM+0x662>
     7ea:	0f 2e       	mov	r0, r31
     7ec:	f4 ea       	ldi	r31, 0xA4	; 164
     7ee:	cf 2e       	mov	r12, r31
     7f0:	f0 e7       	ldi	r31, 0x70	; 112
     7f2:	df 2e       	mov	r13, r31
     7f4:	fd e7       	ldi	r31, 0x7D	; 125
     7f6:	ef 2e       	mov	r14, r31
     7f8:	ff eb       	ldi	r31, 0xBF	; 191
     7fa:	ff 2e       	mov	r15, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	0a c0       	rjmp	.+20     	; 0x814 <CalculPWM+0x662>
     800:	0f 2e       	mov	r0, r31
     802:	f4 ea       	ldi	r31, 0xA4	; 164
     804:	cf 2e       	mov	r12, r31
     806:	f0 e7       	ldi	r31, 0x70	; 112
     808:	df 2e       	mov	r13, r31
     80a:	fd e7       	ldi	r31, 0x7D	; 125
     80c:	ef 2e       	mov	r14, r31
     80e:	ff e3       	ldi	r31, 0x3F	; 63
     810:	ff 2e       	mov	r15, r31
     812:	f0 2d       	mov	r31, r0
     814:	a9 85       	ldd	r26, Y+9	; 0x09
     816:	ba 85       	ldd	r27, Y+10	; 0x0a
     818:	cd 92       	st	X+, r12
     81a:	dd 92       	st	X+, r13
     81c:	ed 92       	st	X+, r14
     81e:	fc 92       	st	X, r15
     820:	13 97       	sbiw	r26, 0x03	; 3
}
     822:	2e 96       	adiw	r28, 0x0e	; 14
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	df 90       	pop	r13
     83c:	cf 90       	pop	r12
     83e:	bf 90       	pop	r11
     840:	af 90       	pop	r10
     842:	9f 90       	pop	r9
     844:	8f 90       	pop	r8
     846:	7f 90       	pop	r7
     848:	6f 90       	pop	r6
     84a:	5f 90       	pop	r5
     84c:	4f 90       	pop	r4
     84e:	3f 90       	pop	r3
     850:	2f 90       	pop	r2
     852:	08 95       	ret

00000854 <PWM_Init>:
extern volatile uint16_t somme_vitesse[];


void PWM_Init(void) {
	
	compteur1 = 0;
     854:	10 92 f3 00 	sts	0x00F3, r1
     858:	10 92 f2 00 	sts	0x00F2, r1
	compteurA = 0;
     85c:	10 92 f1 00 	sts	0x00F1, r1
     860:	10 92 f0 00 	sts	0x00F0, r1
	compteurB = 0;
     864:	10 92 f6 00 	sts	0x00F6, r1
     868:	10 92 f5 00 	sts	0x00F5, r1
	//- Fast PWM
	//PWMA = moteur droit - Interruption de débordement
	//- Niveau haut au débordement
	//- Niveau bas à la comparaison
	// Configuration mode 14 (Fast PWM avec ICR1)
	DDRD = (1 << PIND4) | (1 << PIND5);  //Pin 4 et 5 configurées en sortie
     86c:	80 e3       	ldi	r24, 0x30	; 48
     86e:	81 bb       	out	0x11, r24	; 17
	TCCR1A =  (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1)  | (0 << COM1B0)   |  (0 << FOC1A)  |  (0 << FOC1B) |  (1 << WGM11) | (0 << WGM10);
     870:	82 ea       	ldi	r24, 0xA2	; 162
     872:	8f bd       	out	0x2f, r24	; 47
	TCCR1B =  (0 << ICNC1)  | (0 << ICES1)  | (0 << 5)      |  (1 << WGM13)    |  (1 << WGM12)  | ( 0 << CS12)  |  (1 << CS11)  | (0 << CS10);
     874:	8a e1       	ldi	r24, 0x1A	; 26
     876:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0;                                                                                                                                                                                                                                                                  
     878:	1b bc       	out	0x2b, r1	; 43
     87a:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
     87c:	19 bc       	out	0x29, r1	; 41
     87e:	18 bc       	out	0x28, r1	; 40
	ICR1 = PWM_TOP;
     880:	8f e0       	ldi	r24, 0x0F	; 15
     882:	97 e2       	ldi	r25, 0x27	; 39
     884:	97 bd       	out	0x27, r25	; 39
     886:	86 bd       	out	0x26, r24	; 38
	TIMSK = (0 << OCIE2)  | (0 << TOIE2)  | (0 << TICIE1) |   (0 << OCIE1A) | (0 << OCIE1B) |  (1 << TOIE1) | (0 << OCIE0) | (0 << TOIE0);
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	89 bf       	out	0x39, r24	; 57
     88c:	08 95       	ret

0000088e <PWM_calibrer>:
	OCR1A = (uint16_t)(cycleG * PWM_TOP);
	OCR1B = (uint16_t)(cycleD * PWM_TOP);
}

void PWM_calibrer(void)
{
     88e:	8f 92       	push	r8
     890:	9f 92       	push	r9
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
	//Calibration de Vmax+
	PORTD |= (1 << DIR_G1) | (0<<DIR_G2) | (0 << PWM_G) | (0<<PWM_D) | (1 << DIR_D1)| (0 << DIR_D2); //conf V+
     8a6:	82 b3       	in	r24, 0x12	; 18
     8a8:	84 64       	ori	r24, 0x44	; 68
     8aa:	82 bb       	out	0x12, r24	; 18
	PORTA |= (1 << CAL);
     8ac:	dc 9a       	sbi	0x1b, 4	; 27

	//Lancer aquisition
	calibration_req = 1;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 f4 00 	sts	0x00F4, r24
	calibration_rdy =0;
     8b4:	10 92 f7 00 	sts	0x00F7, r1
	while (calibration_rdy!=1) // On attend que le moteur soit en régime permanent (2.5s)
     8b8:	80 91 f7 00 	lds	r24, 0x00F7
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <PWM_calibrer+0x2a>
	;
	calibration_rdy=0;
     8c0:	10 92 f7 00 	sts	0x00F7, r1
	nombre_echantillon[GAUCHE]=0;
     8c4:	10 92 cd 00 	sts	0x00CD, r1
	nombre_echantillon[DROIT]=0;
     8c8:	10 92 ce 00 	sts	0x00CE, r1
	somme_vitesse[GAUCHE]=0;
     8cc:	10 92 d0 00 	sts	0x00D0, r1
     8d0:	10 92 cf 00 	sts	0x00CF, r1
	somme_vitesse[DROIT]=0;
     8d4:	10 92 d2 00 	sts	0x00D2, r1
     8d8:	10 92 d1 00 	sts	0x00D1, r1
	while(nombre_echantillon[GAUCHE]<ECHANTILLON_INIT && nombre_echantillon[DROIT]<ECHANTILLON_INIT)
     8dc:	ed ec       	ldi	r30, 0xCD	; 205
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ae ec       	ldi	r26, 0xCE	; 206
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	84 36       	cpi	r24, 0x64	; 100
     8e8:	18 f4       	brcc	.+6      	; 0x8f0 <PWM_calibrer+0x62>
     8ea:	8c 91       	ld	r24, X
     8ec:	84 36       	cpi	r24, 0x64	; 100
     8ee:	d0 f3       	brcs	.-12     	; 0x8e4 <PWM_calibrer+0x56>
	;//On attend que l'ADC est recolté assez d'échantillons
	moyenne_Moteur(vMaxPlus, somme_vitesse, nombre_echantillon);
     8f0:	4d ec       	ldi	r20, 0xCD	; 205
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	6f ec       	ldi	r22, 0xCF	; 207
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	85 eb       	ldi	r24, 0xB5	; 181
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 b2 00 	call	0x164	; 0x164 <moyenne_Moteur>
	PORTB^=0b00000001;
     900:	98 b3       	in	r25, 0x18	; 24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	98 27       	eor	r25, r24
     906:	98 bb       	out	0x18, r25	; 24
	
	//Calibration de Vzero+
	PORTD |= (1 << DIR_G1) | (0 << DIR_G2) | (0 << PWM_G) | (0 << PWM_D) | (1 << DIR_D1)| (0 << DIR_D2); //conf V+
     908:	92 b3       	in	r25, 0x12	; 18
     90a:	94 64       	ori	r25, 0x44	; 68
     90c:	92 bb       	out	0x12, r25	; 18
	PORTA |= (0 << CAL);
     90e:	9b b3       	in	r25, 0x1b	; 27
     910:	9b bb       	out	0x1b, r25	; 27
	calibration_req = 1;
     912:	80 93 f4 00 	sts	0x00F4, r24
	calibration_rdy =0;
     916:	10 92 f7 00 	sts	0x00F7, r1
	while (calibration_rdy!=1)
     91a:	80 91 f7 00 	lds	r24, 0x00F7
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	e1 f7       	brne	.-8      	; 0x91a <PWM_calibrer+0x8c>
	;
	nombre_echantillon[GAUCHE]=0;
     922:	10 92 cd 00 	sts	0x00CD, r1
	nombre_echantillon[DROIT]=0;
     926:	10 92 ce 00 	sts	0x00CE, r1
	somme_vitesse[GAUCHE]=0;
     92a:	10 92 d0 00 	sts	0x00D0, r1
     92e:	10 92 cf 00 	sts	0x00CF, r1
	somme_vitesse[DROIT]=0;
     932:	10 92 d2 00 	sts	0x00D2, r1
     936:	10 92 d1 00 	sts	0x00D1, r1
	calibration_rdy=0;
     93a:	10 92 f7 00 	sts	0x00F7, r1
	while(nombre_echantillon[GAUCHE]<ECHANTILLON_INIT && nombre_echantillon[DROIT]<ECHANTILLON_INIT)
     93e:	ed ec       	ldi	r30, 0xCD	; 205
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	ae ec       	ldi	r26, 0xCE	; 206
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	84 36       	cpi	r24, 0x64	; 100
     94a:	18 f4       	brcc	.+6      	; 0x952 <PWM_calibrer+0xc4>
     94c:	8c 91       	ld	r24, X
     94e:	84 36       	cpi	r24, 0x64	; 100
     950:	d0 f3       	brcs	.-12     	; 0x946 <PWM_calibrer+0xb8>
	;//On attend que l'ADC est recolté assez d'échantillons
	moyenne_Moteur(vZeroPlus, somme_vitesse, nombre_echantillon);
     952:	4d ec       	ldi	r20, 0xCD	; 205
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	6f ec       	ldi	r22, 0xCF	; 207
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	81 eb       	ldi	r24, 0xB1	; 177
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 b2 00 	call	0x164	; 0x164 <moyenne_Moteur>
	PORTB^=0b00000010;
     962:	98 b3       	in	r25, 0x18	; 24
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	89 27       	eor	r24, r25
     968:	88 bb       	out	0x18, r24	; 24
	
	//Calibration de Vmax-
	PORTD |= (0 << DIR_G1) | (1 << DIR_G2) | (0 << PWM_G) | (0 << PWM_D) | (0 << DIR_D1)| (1 << DIR_D2); //conf V+
     96a:	82 b3       	in	r24, 0x12	; 18
     96c:	88 68       	ori	r24, 0x88	; 136
     96e:	82 bb       	out	0x12, r24	; 18
	PORTA |= (1 << CAL);
     970:	dc 9a       	sbi	0x1b, 4	; 27
	calibration_req = 1;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 f4 00 	sts	0x00F4, r24
	calibration_rdy =0;
     978:	10 92 f7 00 	sts	0x00F7, r1
	while (calibration_rdy!=1)
     97c:	80 91 f7 00 	lds	r24, 0x00F7
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	e1 f7       	brne	.-8      	; 0x97c <PWM_calibrer+0xee>
	;
	nombre_echantillon[GAUCHE]=0;
     984:	10 92 cd 00 	sts	0x00CD, r1
	nombre_echantillon[DROIT]=0;
     988:	10 92 ce 00 	sts	0x00CE, r1
	somme_vitesse[GAUCHE]=0;
     98c:	10 92 d0 00 	sts	0x00D0, r1
     990:	10 92 cf 00 	sts	0x00CF, r1
	somme_vitesse[DROIT]=0;
     994:	10 92 d2 00 	sts	0x00D2, r1
     998:	10 92 d1 00 	sts	0x00D1, r1
	calibration_rdy=0;
     99c:	10 92 f7 00 	sts	0x00F7, r1
	while(nombre_echantillon[GAUCHE]<ECHANTILLON_INIT && nombre_echantillon[DROIT]<ECHANTILLON_INIT)
     9a0:	ed ec       	ldi	r30, 0xCD	; 205
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	ae ec       	ldi	r26, 0xCE	; 206
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	84 36       	cpi	r24, 0x64	; 100
     9ac:	18 f4       	brcc	.+6      	; 0x9b4 <PWM_calibrer+0x126>
     9ae:	8c 91       	ld	r24, X
     9b0:	84 36       	cpi	r24, 0x64	; 100
     9b2:	d0 f3       	brcs	.-12     	; 0x9a8 <PWM_calibrer+0x11a>
	;//On attend que l'ADC est recolté assez d'échantillons
	moyenne_Moteur(vMaxMoins, somme_vitesse, nombre_echantillon);
     9b4:	4d ec       	ldi	r20, 0xCD	; 205
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	6f ec       	ldi	r22, 0xCF	; 207
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	8d ea       	ldi	r24, 0xAD	; 173
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 b2 00 	call	0x164	; 0x164 <moyenne_Moteur>
	PORTB^=0b00000100;
     9c4:	98 b3       	in	r25, 0x18	; 24
     9c6:	84 e0       	ldi	r24, 0x04	; 4
     9c8:	89 27       	eor	r24, r25
     9ca:	88 bb       	out	0x18, r24	; 24
	
	//Calibration de Vzero-
	PORTD |= (0 << DIR_G1) | (1 << DIR_G2) | (0 << PWM_G) | (0 << PWM_D) | (0 << DIR_D1)| (1 << DIR_D2); //conf V+
     9cc:	82 b3       	in	r24, 0x12	; 18
     9ce:	88 68       	ori	r24, 0x88	; 136
     9d0:	82 bb       	out	0x12, r24	; 18
	PORTA |= (0 << CAL);
     9d2:	8b b3       	in	r24, 0x1b	; 27
     9d4:	8b bb       	out	0x1b, r24	; 27
	calibration_req = 1;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 f4 00 	sts	0x00F4, r24
	calibration_rdy =0;
     9dc:	10 92 f7 00 	sts	0x00F7, r1
	while (calibration_rdy!=1)
     9e0:	80 91 f7 00 	lds	r24, 0x00F7
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <PWM_calibrer+0x152>
	;
	nombre_echantillon[GAUCHE]=0;
     9e8:	10 92 cd 00 	sts	0x00CD, r1
	nombre_echantillon[DROIT]=0;
     9ec:	10 92 ce 00 	sts	0x00CE, r1
	somme_vitesse[GAUCHE]=0;
     9f0:	10 92 d0 00 	sts	0x00D0, r1
     9f4:	10 92 cf 00 	sts	0x00CF, r1
	somme_vitesse[DROIT]=0;
     9f8:	10 92 d2 00 	sts	0x00D2, r1
     9fc:	10 92 d1 00 	sts	0x00D1, r1
	calibration_rdy=0;
     a00:	10 92 f7 00 	sts	0x00F7, r1
	while(nombre_echantillon[GAUCHE]<ECHANTILLON_INIT && nombre_echantillon[DROIT]<ECHANTILLON_INIT)
     a04:	ed ec       	ldi	r30, 0xCD	; 205
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ae ec       	ldi	r26, 0xCE	; 206
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	84 36       	cpi	r24, 0x64	; 100
     a10:	18 f4       	brcc	.+6      	; 0xa18 <PWM_calibrer+0x18a>
     a12:	8c 91       	ld	r24, X
     a14:	84 36       	cpi	r24, 0x64	; 100
     a16:	d0 f3       	brcs	.-12     	; 0xa0c <PWM_calibrer+0x17e>
	; //On attend que l'ADC est recolté assez d'échantillons
	moyenne_Moteur(vZeroMoins, somme_vitesse, nombre_echantillon);
     a18:	4d ec       	ldi	r20, 0xCD	; 205
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	6f ec       	ldi	r22, 0xCF	; 207
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	89 ea       	ldi	r24, 0xA9	; 169
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 b2 00 	call	0x164	; 0x164 <moyenne_Moteur>
	PORTB^=0b00001000;
     a28:	98 b3       	in	r25, 0x18	; 24
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	89 27       	eor	r24, r25
     a2e:	88 bb       	out	0x18, r24	; 24
	
	//Une fois tous nos échantillons récupérés, on calcul les termes des fonctions de correction (y=a.x+b)
	aPlus[GAUCHE] = (float)(((1023) / (vMaxPlus[GAUCHE] - vZeroPlus[GAUCHE]))/1024);
     a30:	c0 91 b1 00 	lds	r28, 0x00B1
     a34:	d0 91 b2 00 	lds	r29, 0x00B2
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	cb 01       	movw	r24, r22
     a3e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     a42:	4b 01       	movw	r8, r22
     a44:	5c 01       	movw	r10, r24
     a46:	60 93 a1 00 	sts	0x00A1, r22
     a4a:	70 93 a2 00 	sts	0x00A2, r23
     a4e:	80 93 a3 00 	sts	0x00A3, r24
     a52:	90 93 a4 00 	sts	0x00A4, r25
	aPlus[DROIT]  = (float)(((1023) / (vMaxPlus[DROIT] - vZeroPlus[DROIT]))/1024);
     a56:	00 91 b3 00 	lds	r16, 0x00B3
     a5a:	10 91 b4 00 	lds	r17, 0x00B4
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	cb 01       	movw	r24, r22
     a64:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     a68:	6b 01       	movw	r12, r22
     a6a:	7c 01       	movw	r14, r24
     a6c:	60 93 a5 00 	sts	0x00A5, r22
     a70:	70 93 a6 00 	sts	0x00A6, r23
     a74:	80 93 a7 00 	sts	0x00A7, r24
     a78:	90 93 a8 00 	sts	0x00A8, r25
	bPlus[GAUCHE] = (float)(-aPlus[GAUCHE]*vZeroPlus[GAUCHE]/1024); //On divise ici le coef b par 1024 afin d'éviter une division de float
     a7c:	b7 fa       	bst	r11, 7
     a7e:	b0 94       	com	r11
     a80:	b7 f8       	bld	r11, 7
     a82:	b0 94       	com	r11
     a84:	be 01       	movw	r22, r28
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c5 01       	movw	r24, r10
     a94:	b4 01       	movw	r22, r8
     a96:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e8       	ldi	r20, 0x80	; 128
     aa0:	5a e3       	ldi	r21, 0x3A	; 58
     aa2:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     aa6:	60 93 99 00 	sts	0x0099, r22
     aaa:	70 93 9a 00 	sts	0x009A, r23
     aae:	80 93 9b 00 	sts	0x009B, r24
     ab2:	90 93 9c 00 	sts	0x009C, r25
	bPlus[DROIT]  = (float)(-aPlus[DROIT]*vZeroPlus[DROIT]/1024); //
     ab6:	f7 fa       	bst	r15, 7
     ab8:	f0 94       	com	r15
     aba:	f7 f8       	bld	r15, 7
     abc:	f0 94       	com	r15
     abe:	b8 01       	movw	r22, r16
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     ac8:	9b 01       	movw	r18, r22
     aca:	ac 01       	movw	r20, r24
     acc:	c7 01       	movw	r24, r14
     ace:	b6 01       	movw	r22, r12
     ad0:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e8       	ldi	r20, 0x80	; 128
     ada:	5a e3       	ldi	r21, 0x3A	; 58
     adc:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     ae0:	60 93 9d 00 	sts	0x009D, r22
     ae4:	70 93 9e 00 	sts	0x009E, r23
     ae8:	80 93 9f 00 	sts	0x009F, r24
     aec:	90 93 a0 00 	sts	0x00A0, r25

	aMoins[GAUCHE]= (float)(((1023)/(vMaxMoins[GAUCHE]-vZeroMoins[GAUCHE]))/1024);
     af0:	c0 91 a9 00 	lds	r28, 0x00A9
     af4:	d0 91 aa 00 	lds	r29, 0x00AA
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	cb 01       	movw	r24, r22
     afe:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     b02:	4b 01       	movw	r8, r22
     b04:	5c 01       	movw	r10, r24
     b06:	60 93 91 00 	sts	0x0091, r22
     b0a:	70 93 92 00 	sts	0x0092, r23
     b0e:	80 93 93 00 	sts	0x0093, r24
     b12:	90 93 94 00 	sts	0x0094, r25
	aMoins[DROIT] = (float)(((1023)/(vMaxMoins[DROIT]-vZeroMoins[DROIT]))/1024);
     b16:	00 91 ab 00 	lds	r16, 0x00AB
     b1a:	10 91 ac 00 	lds	r17, 0x00AC
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	cb 01       	movw	r24, r22
     b24:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     b28:	6b 01       	movw	r12, r22
     b2a:	7c 01       	movw	r14, r24
     b2c:	60 93 95 00 	sts	0x0095, r22
     b30:	70 93 96 00 	sts	0x0096, r23
     b34:	80 93 97 00 	sts	0x0097, r24
     b38:	90 93 98 00 	sts	0x0098, r25
	bMoins[GAUCHE]= (float)(-aMoins[GAUCHE]*vZeroMoins[GAUCHE]/1024);
     b3c:	b7 fa       	bst	r11, 7
     b3e:	b0 94       	com	r11
     b40:	b7 f8       	bld	r11, 7
     b42:	b0 94       	com	r11
     b44:	be 01       	movw	r22, r28
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     b4e:	9b 01       	movw	r18, r22
     b50:	ac 01       	movw	r20, r24
     b52:	c5 01       	movw	r24, r10
     b54:	b4 01       	movw	r22, r8
     b56:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e8       	ldi	r20, 0x80	; 128
     b60:	5a e3       	ldi	r21, 0x3A	; 58
     b62:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     b66:	60 93 89 00 	sts	0x0089, r22
     b6a:	70 93 8a 00 	sts	0x008A, r23
     b6e:	80 93 8b 00 	sts	0x008B, r24
     b72:	90 93 8c 00 	sts	0x008C, r25
	bMoins[DROIT] = (float)(-aMoins[DROIT]*vZeroMoins[DROIT]/1024);
     b76:	f7 fa       	bst	r15, 7
     b78:	f0 94       	com	r15
     b7a:	f7 f8       	bld	r15, 7
     b7c:	f0 94       	com	r15
     b7e:	b8 01       	movw	r22, r16
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	40 e8       	ldi	r20, 0x80	; 128
     b9a:	5a e3       	ldi	r21, 0x3A	; 58
     b9c:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     ba0:	60 93 8d 00 	sts	0x008D, r22
     ba4:	70 93 8e 00 	sts	0x008E, r23
     ba8:	80 93 8f 00 	sts	0x008F, r24
     bac:	90 93 90 00 	sts	0x0090, r25

}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	bf 90       	pop	r11
     bc2:	af 90       	pop	r10
     bc4:	9f 90       	pop	r9
     bc6:	8f 90       	pop	r8
     bc8:	08 95       	ret

00000bca <__vector_9>:


ISR(TIMER1_OVF_vect){
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1
     bd4:	2f 93       	push	r18
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
	
	// Déclenché à chaque 5 ms en conformité est avec les paramètres d'initialisation 
	// de la fonction PWM_init().
	flag5ms=1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 d3 00 	sts	0x00D3, r24
	if (calibration_req == 1)
     be0:	80 91 f4 00 	lds	r24, 0x00F4
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	c9 f4       	brne	.+50     	; 0xc1a <__vector_9+0x50>
	{
		compteur1++;
     be8:	80 91 f2 00 	lds	r24, 0x00F2
     bec:	90 91 f3 00 	lds	r25, 0x00F3
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	90 93 f3 00 	sts	0x00F3, r25
     bf6:	80 93 f2 00 	sts	0x00F2, r24
		if (compteur1 >= REGIME_TRANSITOIRE)
     bfa:	80 91 f2 00 	lds	r24, 0x00F2
     bfe:	90 91 f3 00 	lds	r25, 0x00F3
     c02:	84 3f       	cpi	r24, 0xF4	; 244
     c04:	91 40       	sbci	r25, 0x01	; 1
     c06:	48 f0       	brcs	.+18     	; 0xc1a <__vector_9+0x50>
		{
			calibration_req = 0;
     c08:	10 92 f4 00 	sts	0x00F4, r1
			compteur1 = 0;
     c0c:	10 92 f3 00 	sts	0x00F3, r1
     c10:	10 92 f2 00 	sts	0x00F2, r1
			calibration_rdy = 1;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 f7 00 	sts	0x00F7, r24
		}
		
	}
	
	
}
     c1a:	9f 91       	pop	r25
     c1c:	8f 91       	pop	r24
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <main>:
//Variable de Test à suprimmer
uint8_t test1=0;

int main(void)
{
	sei();   
     c2a:	78 94       	sei
	USART_Init();
     c2c:	0e 94 2b 07 	call	0xe56	; 0xe56 <USART_Init>
	DDRB=0xFF;
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
     c34:	18 ba       	out	0x18, r1	; 24
	//USART_Debug('1');
	ADC_Init();
     c36:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
	//USART_Debug('2');
	PWM_Init();
     c3a:	0e 94 2a 04 	call	0x854	; 0x854 <PWM_Init>
	USART_Debug('3');
     c3e:	83 e3       	ldi	r24, 0x33	; 51
     c40:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <USART_Debug>
	PWM_calibrer();
     c44:	0e 94 47 04 	call	0x88e	; 0x88e <PWM_calibrer>
	//USART_Debug('4');
	//USART_Transmettre(DEBUT_DEBUG);
	flag5ms=0;
     c48:	10 92 d3 00 	sts	0x00D3, r1
					vitesseMoteurCorr[DROIT]=0.0;
				}
			}
			else
			{
				if (vitesseMoteur[GAUCHE] > vZeroMoins[GAUCHE]) //Si le moteur tourne en marche arrière
     c4c:	0f 2e       	mov	r0, r31
     c4e:	f9 ea       	ldi	r31, 0xA9	; 169
     c50:	2f 2e       	mov	r2, r31
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	3f 2e       	mov	r3, r31
     c56:	f0 2d       	mov	r31, r0
				{
					vitesseMoteurCorr[GAUCHE]=-((float)vitesseMoteur[GAUCHE]*aMoins[GAUCHE]+bMoins[GAUCHE]);
				}
				else
				{
					vitesseMoteurCorr[GAUCHE]=0.0;
     c58:	c5 ec       	ldi	r28, 0xC5	; 197
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
				{ 
					vitesseMoteurCorr[DROIT]=(float)vitesseMoteur[DROIT]*aPlus[DROIT]+bPlus[DROIT]; 
				}
				else
				{
					vitesseMoteurCorr[DROIT]=0.0;
     c5c:	0f 2e       	mov	r0, r31
     c5e:	f9 ec       	ldi	r31, 0xC9	; 201
     c60:	6f 2e       	mov	r6, r31
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	7f 2e       	mov	r7, r31
     c66:	f0 2d       	mov	r31, r0
				}
			}
	    } 
		
		//Calcul du duty cycle 
		CalculPWM(vitesseCommande, angleCommande, vitesseMoteurCorr[GAUCHE], vitesseMoteurCorr[DROIT], &dutyCycle[GAUCHE], &dutyCycle[DROIT]);
     c68:	0f 2e       	mov	r0, r31
     c6a:	fd eb       	ldi	r31, 0xBD	; 189
     c6c:	4f 2e       	mov	r4, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	5f 2e       	mov	r5, r31
     c72:	f0 2d       	mov	r31, r0
	flag5ms=0;

	while(1)
    {
		//Reception de la commande
		Lire_Trame(&vitesseCommande, &angleCommande);
     c74:	61 e8       	ldi	r22, 0x81	; 129
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	85 e8       	ldi	r24, 0x85	; 133
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <Lire_Trame>
		
		if (flag5ms!=0) //Toutes les 5ms on déclanche le calcul du PWM
     c80:	80 91 d3 00 	lds	r24, 0x00D3
     c84:	88 23       	and	r24, r24
     c86:	09 f4       	brne	.+2      	; 0xc8a <main+0x60>
     c88:	c0 c0       	rjmp	.+384    	; 0xe0a <main+0x1e0>
		{
			//Test de diode clignotant toute les 500ms (à supprimer)
			test1++;
     c8a:	80 91 80 00 	lds	r24, 0x0080
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
			if (test1>100)
     c90:	85 36       	cpi	r24, 0x65	; 101
     c92:	18 f4       	brcc	.+6      	; 0xc9a <main+0x70>
		Lire_Trame(&vitesseCommande, &angleCommande);
		
		if (flag5ms!=0) //Toutes les 5ms on déclanche le calcul du PWM
		{
			//Test de diode clignotant toute les 500ms (à supprimer)
			test1++;
     c94:	80 93 80 00 	sts	0x0080, r24
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <main+0x7a>
			if (test1>100)
			{
				test1=0;
     c9a:	10 92 80 00 	sts	0x0080, r1
				PORTB^=0b10000000;
     c9e:	88 b3       	in	r24, 0x18	; 24
     ca0:	80 58       	subi	r24, 0x80	; 128
     ca2:	88 bb       	out	0x18, r24	; 24
			}
			flag5ms=0;
     ca4:	10 92 d3 00 	sts	0x00D3, r1
			
			// On calcul la moyenne de la vitesse non corrigé des 5ms prec
			moyenne_Moteur(vitesseMoteur, somme_vitesse, nombre_echantillon); //Attention vitesse moteur est encore une valeure entre 0 et 1023
     ca8:	4d ec       	ldi	r20, 0xCD	; 205
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	6f ec       	ldi	r22, 0xCF	; 207
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 ec       	ldi	r24, 0xC1	; 193
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 b2 00 	call	0x164	; 0x164 <moyenne_Moteur>
			
			//Moteur gauche
			if ((PORTA & 0b00100000) == 0)//Si le moteur tourne en marche avant
     cb8:	dd 99       	sbic	0x1b, 5	; 27
     cba:	29 c0       	rjmp	.+82     	; 0xd0e <main+0xe4>
			{
				if (vitesseMoteur[GAUCHE] > vZeroPlus[GAUCHE]) //
     cbc:	60 91 c1 00 	lds	r22, 0x00C1
     cc0:	70 91 c2 00 	lds	r23, 0x00C2
     cc4:	e1 eb       	ldi	r30, 0xB1	; 177
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	86 17       	cp	r24, r22
     cce:	97 07       	cpc	r25, r23
     cd0:	c8 f4       	brcc	.+50     	; 0xd04 <main+0xda>
				{
					//vitesseMoteurCorr contient la vitesse moteur corrigé des défaults des moteurs et est compris dans l'interval [-1.0; 1.0]
					vitesseMoteurCorr[GAUCHE]=(float)vitesseMoteur[GAUCHE]*aPlus[GAUCHE]+bPlus[GAUCHE];
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     cda:	e1 ea       	ldi	r30, 0xA1	; 161
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	20 81       	ld	r18, Z
     ce0:	31 81       	ldd	r19, Z+1	; 0x01
     ce2:	42 81       	ldd	r20, Z+2	; 0x02
     ce4:	53 81       	ldd	r21, Z+3	; 0x03
     ce6:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     cea:	e9 e9       	ldi	r30, 0x99	; 153
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	20 81       	ld	r18, Z
     cf0:	31 81       	ldd	r19, Z+1	; 0x01
     cf2:	42 81       	ldd	r20, Z+2	; 0x02
     cf4:	53 81       	ldd	r21, Z+3	; 0x03
     cf6:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     cfa:	68 83       	st	Y, r22
     cfc:	79 83       	std	Y+1, r23	; 0x01
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	9b 83       	std	Y+3, r25	; 0x03
     d02:	2c c0       	rjmp	.+88     	; 0xd5c <main+0x132>
				}
				else
				{
					vitesseMoteurCorr[GAUCHE]=0.0;
     d04:	18 82       	st	Y, r1
     d06:	19 82       	std	Y+1, r1	; 0x01
     d08:	1a 82       	std	Y+2, r1	; 0x02
     d0a:	1b 82       	std	Y+3, r1	; 0x03
     d0c:	27 c0       	rjmp	.+78     	; 0xd5c <main+0x132>
				}
			}
			else
			{
				if (vitesseMoteur[GAUCHE] > vZeroMoins[GAUCHE]) //Si le moteur tourne en marche arrière
     d0e:	60 91 c1 00 	lds	r22, 0x00C1
     d12:	70 91 c2 00 	lds	r23, 0x00C2
     d16:	f1 01       	movw	r30, r2
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	86 17       	cp	r24, r22
     d1e:	97 07       	cpc	r25, r23
     d20:	c8 f4       	brcc	.+50     	; 0xd54 <main+0x12a>
				{
					vitesseMoteurCorr[GAUCHE]=(float)vitesseMoteur[GAUCHE]*aMoins[GAUCHE]+bMoins[GAUCHE];
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     d2a:	e1 e9       	ldi	r30, 0x91	; 145
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	20 81       	ld	r18, Z
     d30:	31 81       	ldd	r19, Z+1	; 0x01
     d32:	42 81       	ldd	r20, Z+2	; 0x02
     d34:	53 81       	ldd	r21, Z+3	; 0x03
     d36:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     d3a:	e9 e8       	ldi	r30, 0x89	; 137
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	20 81       	ld	r18, Z
     d40:	31 81       	ldd	r19, Z+1	; 0x01
     d42:	42 81       	ldd	r20, Z+2	; 0x02
     d44:	53 81       	ldd	r21, Z+3	; 0x03
     d46:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     d4a:	68 83       	st	Y, r22
     d4c:	79 83       	std	Y+1, r23	; 0x01
     d4e:	8a 83       	std	Y+2, r24	; 0x02
     d50:	9b 83       	std	Y+3, r25	; 0x03
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <main+0x132>
				}
				else
				{
					vitesseMoteurCorr[GAUCHE]=0.0;
     d54:	18 82       	st	Y, r1
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	1a 82       	std	Y+2, r1	; 0x02
     d5a:	1b 82       	std	Y+3, r1	; 0x03
				}
			}
			
			//Moteur Droit
			if ((PORTA & 0b00100000) == 0)//Si le moteur tourne en marche avant
     d5c:	dd 99       	sbic	0x1b, 5	; 27
     d5e:	2b c0       	rjmp	.+86     	; 0xdb6 <main+0x18c>
			{
				if (vitesseMoteur[DROIT] > vZeroPlus[DROIT])
     d60:	e3 ec       	ldi	r30, 0xC3	; 195
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	e3 eb       	ldi	r30, 0xB3	; 179
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	86 17       	cp	r24, r22
     d72:	97 07       	cpc	r25, r23
     d74:	d0 f4       	brcc	.+52     	; 0xdaa <main+0x180>
				{ 
					vitesseMoteurCorr[DROIT]=(float)vitesseMoteur[DROIT]*aPlus[DROIT]+bPlus[DROIT]; 
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     d7e:	e5 ea       	ldi	r30, 0xA5	; 165
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	20 81       	ld	r18, Z
     d84:	31 81       	ldd	r19, Z+1	; 0x01
     d86:	42 81       	ldd	r20, Z+2	; 0x02
     d88:	53 81       	ldd	r21, Z+3	; 0x03
     d8a:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     d8e:	ed e9       	ldi	r30, 0x9D	; 157
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	20 81       	ld	r18, Z
     d94:	31 81       	ldd	r19, Z+1	; 0x01
     d96:	42 81       	ldd	r20, Z+2	; 0x02
     d98:	53 81       	ldd	r21, Z+3	; 0x03
     d9a:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     d9e:	f3 01       	movw	r30, r6
     da0:	60 83       	st	Z, r22
     da2:	71 83       	std	Z+1, r23	; 0x01
     da4:	82 83       	std	Z+2, r24	; 0x02
     da6:	93 83       	std	Z+3, r25	; 0x03
     da8:	30 c0       	rjmp	.+96     	; 0xe0a <main+0x1e0>
				}
				else
				{
					vitesseMoteurCorr[DROIT]=0.0;
     daa:	f3 01       	movw	r30, r6
     dac:	10 82       	st	Z, r1
     dae:	11 82       	std	Z+1, r1	; 0x01
     db0:	12 82       	std	Z+2, r1	; 0x02
     db2:	13 82       	std	Z+3, r1	; 0x03
     db4:	2a c0       	rjmp	.+84     	; 0xe0a <main+0x1e0>
				}
			}
			else
			{
				if (vitesseMoteur[GAUCHE] > vZeroMoins[GAUCHE]) //Si le moteur tourne en marche arrière
     db6:	60 91 c1 00 	lds	r22, 0x00C1
     dba:	70 91 c2 00 	lds	r23, 0x00C2
     dbe:	f1 01       	movw	r30, r2
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	86 17       	cp	r24, r22
     dc6:	97 07       	cpc	r25, r23
     dc8:	e0 f4       	brcc	.+56     	; 0xe02 <main+0x1d8>
				{
					vitesseMoteurCorr[GAUCHE]=-((float)vitesseMoteur[GAUCHE]*aMoins[GAUCHE]+bMoins[GAUCHE]);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
     dd2:	e1 e9       	ldi	r30, 0x91	; 145
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	20 81       	ld	r18, Z
     dd8:	31 81       	ldd	r19, Z+1	; 0x01
     dda:	42 81       	ldd	r20, Z+2	; 0x02
     ddc:	53 81       	ldd	r21, Z+3	; 0x03
     dde:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
     de2:	e9 e8       	ldi	r30, 0x89	; 137
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	20 81       	ld	r18, Z
     de8:	31 81       	ldd	r19, Z+1	; 0x01
     dea:	42 81       	ldd	r20, Z+2	; 0x02
     dec:	53 81       	ldd	r21, Z+3	; 0x03
     dee:	0e 94 14 08 	call	0x1028	; 0x1028 <__addsf3>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	b0 58       	subi	r27, 0x80	; 128
     df8:	88 83       	st	Y, r24
     dfa:	99 83       	std	Y+1, r25	; 0x01
     dfc:	aa 83       	std	Y+2, r26	; 0x02
     dfe:	bb 83       	std	Y+3, r27	; 0x03
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <main+0x1e0>
				}
				else
				{
					vitesseMoteurCorr[GAUCHE]=0.0;
     e02:	18 82       	st	Y, r1
     e04:	19 82       	std	Y+1, r1	; 0x01
     e06:	1a 82       	std	Y+2, r1	; 0x02
     e08:	1b 82       	std	Y+3, r1	; 0x03
				}
			}
	    } 
		
		//Calcul du duty cycle 
		CalculPWM(vitesseCommande, angleCommande, vitesseMoteurCorr[GAUCHE], vitesseMoteurCorr[DROIT], &dutyCycle[GAUCHE], &dutyCycle[DROIT]);
     e0a:	f3 01       	movw	r30, r6
     e0c:	a0 80       	ld	r10, Z
     e0e:	b1 80       	ldd	r11, Z+1	; 0x01
     e10:	c2 80       	ldd	r12, Z+2	; 0x02
     e12:	d3 80       	ldd	r13, Z+3	; 0x03
     e14:	e8 80       	ld	r14, Y
     e16:	f9 80       	ldd	r15, Y+1	; 0x01
     e18:	0a 81       	ldd	r16, Y+2	; 0x02
     e1a:	1b 81       	ldd	r17, Y+3	; 0x03
     e1c:	20 91 81 00 	lds	r18, 0x0081
     e20:	30 91 82 00 	lds	r19, 0x0082
     e24:	40 91 83 00 	lds	r20, 0x0083
     e28:	50 91 84 00 	lds	r21, 0x0084
     e2c:	60 91 85 00 	lds	r22, 0x0085
     e30:	70 91 86 00 	lds	r23, 0x0086
     e34:	80 91 87 00 	lds	r24, 0x0087
     e38:	90 91 88 00 	lds	r25, 0x0088
     e3c:	5f 92       	push	r5
     e3e:	4f 92       	push	r4
     e40:	0f 2e       	mov	r0, r31
     e42:	f9 eb       	ldi	r31, 0xB9	; 185
     e44:	8f 2e       	mov	r8, r31
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	9f 2e       	mov	r9, r31
     e4a:	f0 2d       	mov	r31, r0
     e4c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <CalculPWM>
	}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f cf       	rjmp	.-482    	; 0xc74 <main+0x4a>

00000e56 <USART_Init>:
extern volatile uint8_t donneeRecue, numBuffer, numBufferEnvoi, debug;
extern volatile uint8_t buffer[][TAILLE_BUFFER];

void USART_Init()
{
	UBRRH = 0x00;
     e56:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUD_SELECT; //(uint8_t)(F_CPU / 153600) - (uint8_t)1;
     e58:	87 e6       	ldi	r24, 0x67	; 103
     e5a:	89 b9       	out	0x09, r24	; 9
	//- vitesse = 9600 Baud - 1 bit d’arrêt - Mode : XXXXXXXXXXX
	//- 8 bits de données - pas de parité
	UCSRA = (0 << RXC) | (0 << TXC)	| (1 << UDRE) | (0 << FE) | (0 << DOR) | (0 << PE) | (0 << U2X)	| (0 << MPCM);
     e5c:	80 e2       	ldi	r24, 0x20	; 32
     e5e:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (1 << RXEN)  |  (1 << TXEN) | (0 << UCSZ2)  | (0 << RXB8)	| (0 << TXB8);
     e60:	88 e9       	ldi	r24, 0x98	; 152
     e62:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (0 << UMSEL) | (0 << UPM1) | (0 << UPM0) | (0 << USBS) | (1 << UCSZ1) | (1 << UCSZ0) | (0 << UCPOL);	 
     e64:	86 e8       	ldi	r24, 0x86	; 134
     e66:	80 bd       	out	0x20, r24	; 32
     e68:	08 95       	ret

00000e6a <__vector_14>:
}


//Intéruption pour l'envoi des données via l'USART
ISR(USART_UDRE_vect)
{
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	11 24       	eor	r1, r1
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
	if (buffer[numBufferEnvoi][1]!=0)
     e86:	80 91 ee 00 	lds	r24, 0x00EE
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	fc 01       	movw	r30, r24
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	8e 0f       	add	r24, r30
     e98:	9f 1f       	adc	r25, r31
     e9a:	fc 01       	movw	r30, r24
     e9c:	eb 52       	subi	r30, 0x2B	; 43
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	81 81       	ldd	r24, Z+1	; 0x01
     ea2:	88 23       	and	r24, r24
     ea4:	41 f1       	breq	.+80     	; 0xef6 <__vector_14+0x8c>
	{
		UDR=buffer[numBufferEnvoi][0];
     ea6:	80 91 ee 00 	lds	r24, 0x00EE
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	fc 01       	movw	r30, r24
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	8e 0f       	add	r24, r30
     eb8:	9f 1f       	adc	r25, r31
     eba:	fc 01       	movw	r30, r24
     ebc:	eb 52       	subi	r30, 0x2B	; 43
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	8c b9       	out	0x0c, r24	; 12
		buffer[numBufferEnvoi][1]=0;
     ec4:	80 91 ee 00 	lds	r24, 0x00EE
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	fc 01       	movw	r30, r24
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	8e 0f       	add	r24, r30
     ed6:	9f 1f       	adc	r25, r31
     ed8:	fc 01       	movw	r30, r24
     eda:	eb 52       	subi	r30, 0x2B	; 43
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	11 82       	std	Z+1, r1	; 0x01
		numBufferEnvoi=(numBufferEnvoi+1)%(TAILLE_BUFFER);
     ee0:	80 91 ee 00 	lds	r24, 0x00EE
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	65 e0       	ldi	r22, 0x05	; 5
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	0e 94 a9 09 	call	0x1352	; 0x1352 <__divmodhi4>
     ef0:	80 93 ee 00 	sts	0x00EE, r24
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <__vector_14+0x8e>
	}
	else
	{
		UCSRB &= ~(1 << UDRIE); //Lorsqu'on à envoyé notre donnée dans l'UDR on désactive l'intéruption
     ef6:	55 98       	cbi	0x0a, 5	; 10
	}
	
}
     ef8:	ff 91       	pop	r31
     efa:	ef 91       	pop	r30
     efc:	bf 91       	pop	r27
     efe:	af 91       	pop	r26
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	7f 91       	pop	r23
     f06:	6f 91       	pop	r22
     f08:	5f 91       	pop	r21
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <USART_Envoie>:

//Système de buffer pour USART
void USART_Envoie(uint8_t donneeEnvoi)
{
	//PORTB=(PORTB & 0x80)|(~numBuffer);
	buffer[numBuffer][0]=donneeEnvoi;
     f14:	20 91 ef 00 	lds	r18, 0x00EF
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	f9 01       	movw	r30, r18
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	2e 0f       	add	r18, r30
     f26:	3f 1f       	adc	r19, r31
     f28:	f9 01       	movw	r30, r18
     f2a:	eb 52       	subi	r30, 0x2B	; 43
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	80 83       	st	Z, r24
	buffer[numBuffer][1]=1;
     f30:	80 91 ef 00 	lds	r24, 0x00EF
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	fc 01       	movw	r30, r24
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	ee 0f       	add	r30, r30
     f3e:	ff 1f       	adc	r31, r31
     f40:	8e 0f       	add	r24, r30
     f42:	9f 1f       	adc	r25, r31
     f44:	fc 01       	movw	r30, r24
     f46:	eb 52       	subi	r30, 0x2B	; 43
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	81 83       	std	Z+1, r24	; 0x01
	numBuffer=(numBuffer+1)%TAILLE_BUFFER;
     f4e:	80 91 ef 00 	lds	r24, 0x00EF
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	65 e0       	ldi	r22, 0x05	; 5
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__divmodhi4>
     f5e:	80 93 ef 00 	sts	0x00EF, r24
	UCSRB|=(1 << UDRIE);
     f62:	55 9a       	sbi	0x0a, 5	; 10
     f64:	08 95       	ret

00000f66 <__vector_13>:
	UCSRC = (1 << URSEL) | (0 << UMSEL) | (0 << UPM1) | (0 << UPM0) | (0 << USBS) | (1 << UCSZ1) | (1 << UCSZ0) | (0 << UCPOL);	 
}

//Intéruption pour la reception des trames de commandes
ISR(USART_RXC_vect)
{
     f66:	1f 92       	push	r1
     f68:	0f 92       	push	r0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	2f 93       	push	r18
     f72:	3f 93       	push	r19
     f74:	4f 93       	push	r20
     f76:	5f 93       	push	r21
     f78:	6f 93       	push	r22
     f7a:	7f 93       	push	r23
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	af 93       	push	r26
     f82:	bf 93       	push	r27
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
	donneeRecue=UDR;
     f88:	8c b1       	in	r24, 0x0c	; 12
     f8a:	80 93 f8 00 	sts	0x00F8, r24
	//PORTB^=0x80;
	if (debug==0)
     f8e:	80 91 d4 00 	lds	r24, 0x00D4
     f92:	81 11       	cpse	r24, r1
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <__vector_13+0x38>
	{
		USART_Envoie(donneeRecue);
     f96:	80 91 f8 00 	lds	r24, 0x00F8
     f9a:	0e 94 8a 07 	call	0xf14	; 0xf14 <USART_Envoie>
	}
}
     f9e:	ff 91       	pop	r31
     fa0:	ef 91       	pop	r30
     fa2:	bf 91       	pop	r27
     fa4:	af 91       	pop	r26
     fa6:	9f 91       	pop	r25
     fa8:	8f 91       	pop	r24
     faa:	7f 91       	pop	r23
     fac:	6f 91       	pop	r22
     fae:	5f 91       	pop	r21
     fb0:	4f 91       	pop	r20
     fb2:	3f 91       	pop	r19
     fb4:	2f 91       	pop	r18
     fb6:	0f 90       	pop	r0
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	0f 90       	pop	r0
     fbc:	1f 90       	pop	r1
     fbe:	18 95       	reti

00000fc0 <USART_Debug>:
}

//Fonction pour envoyer une donnée(1octet) dans la console
//de commande de notre robot
void USART_Debug(uint8_t donneeDebug)
{
     fc0:	cf 93       	push	r28
     fc2:	c8 2f       	mov	r28, r24
	debug=1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	80 93 d4 00 	sts	0x00D4, r24
	USART_Envoie(DEBUT_DEBUG);
     fca:	83 e2       	ldi	r24, 0x23	; 35
     fcc:	0e 94 8a 07 	call	0xf14	; 0xf14 <USART_Envoie>
	USART_Envoie(donneeDebug);
     fd0:	8c 2f       	mov	r24, r28
     fd2:	0e 94 8a 07 	call	0xf14	; 0xf14 <USART_Envoie>
	USART_Envoie(FIN_DEBUG);
     fd6:	83 e2       	ldi	r24, 0x23	; 35
     fd8:	0e 94 8a 07 	call	0xf14	; 0xf14 <USART_Envoie>
	debug=0;
     fdc:	10 92 d4 00 	sts	0x00D4, r1
}
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <Lire_Trame>:


//Fonction de lecture des trames de commande
void Lire_Trame(float *vitesse, float *angle)
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	ec 01       	movw	r28, r24
	switch (etat)
		{

		case 1:
			{
				if (donneeRecue == 0xF1) // réception d'une commande normale
     fea:	80 91 f8 00 	lds	r24, 0x00F8
     fee:	81 3f       	cpi	r24, 0xF1	; 241
     ff0:	b9 f0       	breq	.+46     	; 0x1020 <Lire_Trame+0x3c>
				}
			}

		case 2:
			{
				*vitesse = ((float)donneeRecue-100)*0.01;
     ff2:	60 91 f8 00 	lds	r22, 0x00F8
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__floatunsisf>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	48 ec       	ldi	r20, 0xC8	; 200
    1006:	52 e4       	ldi	r21, 0x42	; 66
    1008:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
    100c:	2a e0       	ldi	r18, 0x0A	; 10
    100e:	37 ed       	ldi	r19, 0xD7	; 215
    1010:	43 e2       	ldi	r20, 0x23	; 35
    1012:	5c e3       	ldi	r21, 0x3C	; 60
    1014:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3>
    1018:	68 83       	st	Y, r22
    101a:	79 83       	std	Y+1, r23	; 0x01
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9b 83       	std	Y+3, r25	; 0x03
				etat = 0;
				break;
			}
		}

}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <__subsf3>:
    1026:	50 58       	subi	r21, 0x80	; 128

00001028 <__addsf3>:
    1028:	bb 27       	eor	r27, r27
    102a:	aa 27       	eor	r26, r26
    102c:	0e d0       	rcall	.+28     	; 0x104a <__addsf3x>
    102e:	dc c0       	rjmp	.+440    	; 0x11e8 <__fp_round>
    1030:	cd d0       	rcall	.+410    	; 0x11cc <__fp_pscA>
    1032:	30 f0       	brcs	.+12     	; 0x1040 <__addsf3+0x18>
    1034:	d2 d0       	rcall	.+420    	; 0x11da <__fp_pscB>
    1036:	20 f0       	brcs	.+8      	; 0x1040 <__addsf3+0x18>
    1038:	31 f4       	brne	.+12     	; 0x1046 <__addsf3+0x1e>
    103a:	9f 3f       	cpi	r25, 0xFF	; 255
    103c:	11 f4       	brne	.+4      	; 0x1042 <__addsf3+0x1a>
    103e:	1e f4       	brtc	.+6      	; 0x1046 <__addsf3+0x1e>
    1040:	c2 c0       	rjmp	.+388    	; 0x11c6 <__fp_nan>
    1042:	0e f4       	brtc	.+2      	; 0x1046 <__addsf3+0x1e>
    1044:	e0 95       	com	r30
    1046:	e7 fb       	bst	r30, 7
    1048:	b8 c0       	rjmp	.+368    	; 0x11ba <__fp_inf>

0000104a <__addsf3x>:
    104a:	e9 2f       	mov	r30, r25
    104c:	de d0       	rcall	.+444    	; 0x120a <__fp_split3>
    104e:	80 f3       	brcs	.-32     	; 0x1030 <__addsf3+0x8>
    1050:	ba 17       	cp	r27, r26
    1052:	62 07       	cpc	r22, r18
    1054:	73 07       	cpc	r23, r19
    1056:	84 07       	cpc	r24, r20
    1058:	95 07       	cpc	r25, r21
    105a:	18 f0       	brcs	.+6      	; 0x1062 <__addsf3x+0x18>
    105c:	71 f4       	brne	.+28     	; 0x107a <__addsf3x+0x30>
    105e:	9e f5       	brtc	.+102    	; 0x10c6 <__addsf3x+0x7c>
    1060:	f6 c0       	rjmp	.+492    	; 0x124e <__fp_zero>
    1062:	0e f4       	brtc	.+2      	; 0x1066 <__addsf3x+0x1c>
    1064:	e0 95       	com	r30
    1066:	0b 2e       	mov	r0, r27
    1068:	ba 2f       	mov	r27, r26
    106a:	a0 2d       	mov	r26, r0
    106c:	0b 01       	movw	r0, r22
    106e:	b9 01       	movw	r22, r18
    1070:	90 01       	movw	r18, r0
    1072:	0c 01       	movw	r0, r24
    1074:	ca 01       	movw	r24, r20
    1076:	a0 01       	movw	r20, r0
    1078:	11 24       	eor	r1, r1
    107a:	ff 27       	eor	r31, r31
    107c:	59 1b       	sub	r21, r25
    107e:	99 f0       	breq	.+38     	; 0x10a6 <__addsf3x+0x5c>
    1080:	59 3f       	cpi	r21, 0xF9	; 249
    1082:	50 f4       	brcc	.+20     	; 0x1098 <__addsf3x+0x4e>
    1084:	50 3e       	cpi	r21, 0xE0	; 224
    1086:	68 f1       	brcs	.+90     	; 0x10e2 <__addsf3x+0x98>
    1088:	1a 16       	cp	r1, r26
    108a:	f0 40       	sbci	r31, 0x00	; 0
    108c:	a2 2f       	mov	r26, r18
    108e:	23 2f       	mov	r18, r19
    1090:	34 2f       	mov	r19, r20
    1092:	44 27       	eor	r20, r20
    1094:	58 5f       	subi	r21, 0xF8	; 248
    1096:	f3 cf       	rjmp	.-26     	; 0x107e <__addsf3x+0x34>
    1098:	46 95       	lsr	r20
    109a:	37 95       	ror	r19
    109c:	27 95       	ror	r18
    109e:	a7 95       	ror	r26
    10a0:	f0 40       	sbci	r31, 0x00	; 0
    10a2:	53 95       	inc	r21
    10a4:	c9 f7       	brne	.-14     	; 0x1098 <__addsf3x+0x4e>
    10a6:	7e f4       	brtc	.+30     	; 0x10c6 <__addsf3x+0x7c>
    10a8:	1f 16       	cp	r1, r31
    10aa:	ba 0b       	sbc	r27, r26
    10ac:	62 0b       	sbc	r22, r18
    10ae:	73 0b       	sbc	r23, r19
    10b0:	84 0b       	sbc	r24, r20
    10b2:	ba f0       	brmi	.+46     	; 0x10e2 <__addsf3x+0x98>
    10b4:	91 50       	subi	r25, 0x01	; 1
    10b6:	a1 f0       	breq	.+40     	; 0x10e0 <__addsf3x+0x96>
    10b8:	ff 0f       	add	r31, r31
    10ba:	bb 1f       	adc	r27, r27
    10bc:	66 1f       	adc	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	c2 f7       	brpl	.-16     	; 0x10b4 <__addsf3x+0x6a>
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <__addsf3x+0x98>
    10c6:	ba 0f       	add	r27, r26
    10c8:	62 1f       	adc	r22, r18
    10ca:	73 1f       	adc	r23, r19
    10cc:	84 1f       	adc	r24, r20
    10ce:	48 f4       	brcc	.+18     	; 0x10e2 <__addsf3x+0x98>
    10d0:	87 95       	ror	r24
    10d2:	77 95       	ror	r23
    10d4:	67 95       	ror	r22
    10d6:	b7 95       	ror	r27
    10d8:	f7 95       	ror	r31
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <__addsf3x+0x96>
    10de:	b3 cf       	rjmp	.-154    	; 0x1046 <__addsf3+0x1e>
    10e0:	93 95       	inc	r25
    10e2:	88 0f       	add	r24, r24
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <__addsf3x+0x9e>
    10e6:	99 27       	eor	r25, r25
    10e8:	ee 0f       	add	r30, r30
    10ea:	97 95       	ror	r25
    10ec:	87 95       	ror	r24
    10ee:	08 95       	ret

000010f0 <__cmpsf2>:
    10f0:	40 d0       	rcall	.+128    	; 0x1172 <__fp_cmp>
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <__cmpsf2+0x6>
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	08 95       	ret

000010f8 <__floatunsisf>:
    10f8:	e8 94       	clt
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <__floatsisf+0x12>

000010fc <__floatsisf>:
    10fc:	97 fb       	bst	r25, 7
    10fe:	3e f4       	brtc	.+14     	; 0x110e <__floatsisf+0x12>
    1100:	90 95       	com	r25
    1102:	80 95       	com	r24
    1104:	70 95       	com	r23
    1106:	61 95       	neg	r22
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	99 23       	and	r25, r25
    1110:	a9 f0       	breq	.+42     	; 0x113c <__floatsisf+0x40>
    1112:	f9 2f       	mov	r31, r25
    1114:	96 e9       	ldi	r25, 0x96	; 150
    1116:	bb 27       	eor	r27, r27
    1118:	93 95       	inc	r25
    111a:	f6 95       	lsr	r31
    111c:	87 95       	ror	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b7 95       	ror	r27
    1124:	f1 11       	cpse	r31, r1
    1126:	f8 cf       	rjmp	.-16     	; 0x1118 <__floatsisf+0x1c>
    1128:	fa f4       	brpl	.+62     	; 0x1168 <__floatsisf+0x6c>
    112a:	bb 0f       	add	r27, r27
    112c:	11 f4       	brne	.+4      	; 0x1132 <__floatsisf+0x36>
    112e:	60 ff       	sbrs	r22, 0
    1130:	1b c0       	rjmp	.+54     	; 0x1168 <__floatsisf+0x6c>
    1132:	6f 5f       	subi	r22, 0xFF	; 255
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	8f 4f       	sbci	r24, 0xFF	; 255
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	16 c0       	rjmp	.+44     	; 0x1168 <__floatsisf+0x6c>
    113c:	88 23       	and	r24, r24
    113e:	11 f0       	breq	.+4      	; 0x1144 <__floatsisf+0x48>
    1140:	96 e9       	ldi	r25, 0x96	; 150
    1142:	11 c0       	rjmp	.+34     	; 0x1166 <__floatsisf+0x6a>
    1144:	77 23       	and	r23, r23
    1146:	21 f0       	breq	.+8      	; 0x1150 <__floatsisf+0x54>
    1148:	9e e8       	ldi	r25, 0x8E	; 142
    114a:	87 2f       	mov	r24, r23
    114c:	76 2f       	mov	r23, r22
    114e:	05 c0       	rjmp	.+10     	; 0x115a <__floatsisf+0x5e>
    1150:	66 23       	and	r22, r22
    1152:	71 f0       	breq	.+28     	; 0x1170 <__floatsisf+0x74>
    1154:	96 e8       	ldi	r25, 0x86	; 134
    1156:	86 2f       	mov	r24, r22
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	2a f0       	brmi	.+10     	; 0x1168 <__floatsisf+0x6c>
    115e:	9a 95       	dec	r25
    1160:	66 0f       	add	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	da f7       	brpl	.-10     	; 0x115e <__floatsisf+0x62>
    1168:	88 0f       	add	r24, r24
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	97 f9       	bld	r25, 7
    1170:	08 95       	ret

00001172 <__fp_cmp>:
    1172:	99 0f       	add	r25, r25
    1174:	00 08       	sbc	r0, r0
    1176:	55 0f       	add	r21, r21
    1178:	aa 0b       	sbc	r26, r26
    117a:	e0 e8       	ldi	r30, 0x80	; 128
    117c:	fe ef       	ldi	r31, 0xFE	; 254
    117e:	16 16       	cp	r1, r22
    1180:	17 06       	cpc	r1, r23
    1182:	e8 07       	cpc	r30, r24
    1184:	f9 07       	cpc	r31, r25
    1186:	c0 f0       	brcs	.+48     	; 0x11b8 <__fp_cmp+0x46>
    1188:	12 16       	cp	r1, r18
    118a:	13 06       	cpc	r1, r19
    118c:	e4 07       	cpc	r30, r20
    118e:	f5 07       	cpc	r31, r21
    1190:	98 f0       	brcs	.+38     	; 0x11b8 <__fp_cmp+0x46>
    1192:	62 1b       	sub	r22, r18
    1194:	73 0b       	sbc	r23, r19
    1196:	84 0b       	sbc	r24, r20
    1198:	95 0b       	sbc	r25, r21
    119a:	39 f4       	brne	.+14     	; 0x11aa <__fp_cmp+0x38>
    119c:	0a 26       	eor	r0, r26
    119e:	61 f0       	breq	.+24     	; 0x11b8 <__fp_cmp+0x46>
    11a0:	23 2b       	or	r18, r19
    11a2:	24 2b       	or	r18, r20
    11a4:	25 2b       	or	r18, r21
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <__fp_cmp+0x3e>
    11a8:	08 95       	ret
    11aa:	0a 26       	eor	r0, r26
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <__fp_cmp+0x3e>
    11ae:	a1 40       	sbci	r26, 0x01	; 1
    11b0:	a6 95       	lsr	r26
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	81 1d       	adc	r24, r1
    11b6:	81 1d       	adc	r24, r1
    11b8:	08 95       	ret

000011ba <__fp_inf>:
    11ba:	97 f9       	bld	r25, 7
    11bc:	9f 67       	ori	r25, 0x7F	; 127
    11be:	80 e8       	ldi	r24, 0x80	; 128
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	08 95       	ret

000011c6 <__fp_nan>:
    11c6:	9f ef       	ldi	r25, 0xFF	; 255
    11c8:	80 ec       	ldi	r24, 0xC0	; 192
    11ca:	08 95       	ret

000011cc <__fp_pscA>:
    11cc:	00 24       	eor	r0, r0
    11ce:	0a 94       	dec	r0
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	18 06       	cpc	r1, r24
    11d6:	09 06       	cpc	r0, r25
    11d8:	08 95       	ret

000011da <__fp_pscB>:
    11da:	00 24       	eor	r0, r0
    11dc:	0a 94       	dec	r0
    11de:	12 16       	cp	r1, r18
    11e0:	13 06       	cpc	r1, r19
    11e2:	14 06       	cpc	r1, r20
    11e4:	05 06       	cpc	r0, r21
    11e6:	08 95       	ret

000011e8 <__fp_round>:
    11e8:	09 2e       	mov	r0, r25
    11ea:	03 94       	inc	r0
    11ec:	00 0c       	add	r0, r0
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__fp_round+0xc>
    11f0:	88 23       	and	r24, r24
    11f2:	52 f0       	brmi	.+20     	; 0x1208 <__fp_round+0x20>
    11f4:	bb 0f       	add	r27, r27
    11f6:	40 f4       	brcc	.+16     	; 0x1208 <__fp_round+0x20>
    11f8:	bf 2b       	or	r27, r31
    11fa:	11 f4       	brne	.+4      	; 0x1200 <__fp_round+0x18>
    11fc:	60 ff       	sbrs	r22, 0
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <__fp_round+0x20>
    1200:	6f 5f       	subi	r22, 0xFF	; 255
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	08 95       	ret

0000120a <__fp_split3>:
    120a:	57 fd       	sbrc	r21, 7
    120c:	90 58       	subi	r25, 0x80	; 128
    120e:	44 0f       	add	r20, r20
    1210:	55 1f       	adc	r21, r21
    1212:	59 f0       	breq	.+22     	; 0x122a <__fp_splitA+0x10>
    1214:	5f 3f       	cpi	r21, 0xFF	; 255
    1216:	71 f0       	breq	.+28     	; 0x1234 <__fp_splitA+0x1a>
    1218:	47 95       	ror	r20

0000121a <__fp_splitA>:
    121a:	88 0f       	add	r24, r24
    121c:	97 fb       	bst	r25, 7
    121e:	99 1f       	adc	r25, r25
    1220:	61 f0       	breq	.+24     	; 0x123a <__fp_splitA+0x20>
    1222:	9f 3f       	cpi	r25, 0xFF	; 255
    1224:	79 f0       	breq	.+30     	; 0x1244 <__fp_splitA+0x2a>
    1226:	87 95       	ror	r24
    1228:	08 95       	ret
    122a:	12 16       	cp	r1, r18
    122c:	13 06       	cpc	r1, r19
    122e:	14 06       	cpc	r1, r20
    1230:	55 1f       	adc	r21, r21
    1232:	f2 cf       	rjmp	.-28     	; 0x1218 <__fp_split3+0xe>
    1234:	46 95       	lsr	r20
    1236:	f1 df       	rcall	.-30     	; 0x121a <__fp_splitA>
    1238:	08 c0       	rjmp	.+16     	; 0x124a <__fp_splitA+0x30>
    123a:	16 16       	cp	r1, r22
    123c:	17 06       	cpc	r1, r23
    123e:	18 06       	cpc	r1, r24
    1240:	99 1f       	adc	r25, r25
    1242:	f1 cf       	rjmp	.-30     	; 0x1226 <__fp_splitA+0xc>
    1244:	86 95       	lsr	r24
    1246:	71 05       	cpc	r23, r1
    1248:	61 05       	cpc	r22, r1
    124a:	08 94       	sec
    124c:	08 95       	ret

0000124e <__fp_zero>:
    124e:	e8 94       	clt

00001250 <__fp_szero>:
    1250:	bb 27       	eor	r27, r27
    1252:	66 27       	eor	r22, r22
    1254:	77 27       	eor	r23, r23
    1256:	cb 01       	movw	r24, r22
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret

0000125c <__gesf2>:
    125c:	8a df       	rcall	.-236    	; 0x1172 <__fp_cmp>
    125e:	08 f4       	brcc	.+2      	; 0x1262 <__gesf2+0x6>
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	08 95       	ret

00001264 <__mulsf3>:
    1264:	0b d0       	rcall	.+22     	; 0x127c <__mulsf3x>
    1266:	c0 cf       	rjmp	.-128    	; 0x11e8 <__fp_round>
    1268:	b1 df       	rcall	.-158    	; 0x11cc <__fp_pscA>
    126a:	28 f0       	brcs	.+10     	; 0x1276 <__mulsf3+0x12>
    126c:	b6 df       	rcall	.-148    	; 0x11da <__fp_pscB>
    126e:	18 f0       	brcs	.+6      	; 0x1276 <__mulsf3+0x12>
    1270:	95 23       	and	r25, r21
    1272:	09 f0       	breq	.+2      	; 0x1276 <__mulsf3+0x12>
    1274:	a2 cf       	rjmp	.-188    	; 0x11ba <__fp_inf>
    1276:	a7 cf       	rjmp	.-178    	; 0x11c6 <__fp_nan>
    1278:	11 24       	eor	r1, r1
    127a:	ea cf       	rjmp	.-44     	; 0x1250 <__fp_szero>

0000127c <__mulsf3x>:
    127c:	c6 df       	rcall	.-116    	; 0x120a <__fp_split3>
    127e:	a0 f3       	brcs	.-24     	; 0x1268 <__mulsf3+0x4>

00001280 <__mulsf3_pse>:
    1280:	95 9f       	mul	r25, r21
    1282:	d1 f3       	breq	.-12     	; 0x1278 <__mulsf3+0x14>
    1284:	95 0f       	add	r25, r21
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	55 1f       	adc	r21, r21
    128a:	62 9f       	mul	r22, r18
    128c:	f0 01       	movw	r30, r0
    128e:	72 9f       	mul	r23, r18
    1290:	bb 27       	eor	r27, r27
    1292:	f0 0d       	add	r31, r0
    1294:	b1 1d       	adc	r27, r1
    1296:	63 9f       	mul	r22, r19
    1298:	aa 27       	eor	r26, r26
    129a:	f0 0d       	add	r31, r0
    129c:	b1 1d       	adc	r27, r1
    129e:	aa 1f       	adc	r26, r26
    12a0:	64 9f       	mul	r22, r20
    12a2:	66 27       	eor	r22, r22
    12a4:	b0 0d       	add	r27, r0
    12a6:	a1 1d       	adc	r26, r1
    12a8:	66 1f       	adc	r22, r22
    12aa:	82 9f       	mul	r24, r18
    12ac:	22 27       	eor	r18, r18
    12ae:	b0 0d       	add	r27, r0
    12b0:	a1 1d       	adc	r26, r1
    12b2:	62 1f       	adc	r22, r18
    12b4:	73 9f       	mul	r23, r19
    12b6:	b0 0d       	add	r27, r0
    12b8:	a1 1d       	adc	r26, r1
    12ba:	62 1f       	adc	r22, r18
    12bc:	83 9f       	mul	r24, r19
    12be:	a0 0d       	add	r26, r0
    12c0:	61 1d       	adc	r22, r1
    12c2:	22 1f       	adc	r18, r18
    12c4:	74 9f       	mul	r23, r20
    12c6:	33 27       	eor	r19, r19
    12c8:	a0 0d       	add	r26, r0
    12ca:	61 1d       	adc	r22, r1
    12cc:	23 1f       	adc	r18, r19
    12ce:	84 9f       	mul	r24, r20
    12d0:	60 0d       	add	r22, r0
    12d2:	21 1d       	adc	r18, r1
    12d4:	82 2f       	mov	r24, r18
    12d6:	76 2f       	mov	r23, r22
    12d8:	6a 2f       	mov	r22, r26
    12da:	11 24       	eor	r1, r1
    12dc:	9f 57       	subi	r25, 0x7F	; 127
    12de:	50 40       	sbci	r21, 0x00	; 0
    12e0:	8a f0       	brmi	.+34     	; 0x1304 <__mulsf3_pse+0x84>
    12e2:	e1 f0       	breq	.+56     	; 0x131c <__mulsf3_pse+0x9c>
    12e4:	88 23       	and	r24, r24
    12e6:	4a f0       	brmi	.+18     	; 0x12fa <__mulsf3_pse+0x7a>
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	bb 1f       	adc	r27, r27
    12ee:	66 1f       	adc	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	88 1f       	adc	r24, r24
    12f4:	91 50       	subi	r25, 0x01	; 1
    12f6:	50 40       	sbci	r21, 0x00	; 0
    12f8:	a9 f7       	brne	.-22     	; 0x12e4 <__mulsf3_pse+0x64>
    12fa:	9e 3f       	cpi	r25, 0xFE	; 254
    12fc:	51 05       	cpc	r21, r1
    12fe:	70 f0       	brcs	.+28     	; 0x131c <__mulsf3_pse+0x9c>
    1300:	5c cf       	rjmp	.-328    	; 0x11ba <__fp_inf>
    1302:	a6 cf       	rjmp	.-180    	; 0x1250 <__fp_szero>
    1304:	5f 3f       	cpi	r21, 0xFF	; 255
    1306:	ec f3       	brlt	.-6      	; 0x1302 <__mulsf3_pse+0x82>
    1308:	98 3e       	cpi	r25, 0xE8	; 232
    130a:	dc f3       	brlt	.-10     	; 0x1302 <__mulsf3_pse+0x82>
    130c:	86 95       	lsr	r24
    130e:	77 95       	ror	r23
    1310:	67 95       	ror	r22
    1312:	b7 95       	ror	r27
    1314:	f7 95       	ror	r31
    1316:	e7 95       	ror	r30
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	c1 f7       	brne	.-16     	; 0x130c <__mulsf3_pse+0x8c>
    131c:	fe 2b       	or	r31, r30
    131e:	88 0f       	add	r24, r24
    1320:	91 1d       	adc	r25, r1
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	97 f9       	bld	r25, 7
    1328:	08 95       	ret

0000132a <__udivmodhi4>:
    132a:	aa 1b       	sub	r26, r26
    132c:	bb 1b       	sub	r27, r27
    132e:	51 e1       	ldi	r21, 0x11	; 17
    1330:	07 c0       	rjmp	.+14     	; 0x1340 <__udivmodhi4_ep>

00001332 <__udivmodhi4_loop>:
    1332:	aa 1f       	adc	r26, r26
    1334:	bb 1f       	adc	r27, r27
    1336:	a6 17       	cp	r26, r22
    1338:	b7 07       	cpc	r27, r23
    133a:	10 f0       	brcs	.+4      	; 0x1340 <__udivmodhi4_ep>
    133c:	a6 1b       	sub	r26, r22
    133e:	b7 0b       	sbc	r27, r23

00001340 <__udivmodhi4_ep>:
    1340:	88 1f       	adc	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	5a 95       	dec	r21
    1346:	a9 f7       	brne	.-22     	; 0x1332 <__udivmodhi4_loop>
    1348:	80 95       	com	r24
    134a:	90 95       	com	r25
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	08 95       	ret

00001352 <__divmodhi4>:
    1352:	97 fb       	bst	r25, 7
    1354:	07 2e       	mov	r0, r23
    1356:	16 f4       	brtc	.+4      	; 0x135c <__divmodhi4+0xa>
    1358:	00 94       	com	r0
    135a:	07 d0       	rcall	.+14     	; 0x136a <__divmodhi4_neg1>
    135c:	77 fd       	sbrc	r23, 7
    135e:	09 d0       	rcall	.+18     	; 0x1372 <__divmodhi4_neg2>
    1360:	0e 94 95 09 	call	0x132a	; 0x132a <__udivmodhi4>
    1364:	07 fc       	sbrc	r0, 7
    1366:	05 d0       	rcall	.+10     	; 0x1372 <__divmodhi4_neg2>
    1368:	3e f4       	brtc	.+14     	; 0x1378 <__divmodhi4_exit>

0000136a <__divmodhi4_neg1>:
    136a:	90 95       	com	r25
    136c:	81 95       	neg	r24
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	08 95       	ret

00001372 <__divmodhi4_neg2>:
    1372:	70 95       	com	r23
    1374:	61 95       	neg	r22
    1376:	7f 4f       	sbci	r23, 0xFF	; 255

00001378 <__divmodhi4_exit>:
    1378:	08 95       	ret

0000137a <_exit>:
    137a:	f8 94       	cli

0000137c <__stop_program>:
    137c:	ff cf       	rjmp	.-2      	; 0x137c <__stop_program>
